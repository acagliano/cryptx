	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_hashlib_CSPRNGInit
_hashlib_CSPRNGInit:
	ld	hl, -15
	call	__frameset
	ld	hl, 666
	ld	(ix + -9), hl
	ld	hl, 0
	ld	(ix + -6), hl
	ld	iy, -2729984
	ld	de, -2727936
BB0_1:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	nc, BB0_2
	or	a, a
	sbc	hl, hl
	ld	(ix + -3), iy
BB0_3:
	push	hl
	pop	bc
	ld	de, 8
	or	a, a
	sbc	hl, de
	jq	z, BB0_5
	ld	hl, 1
	ld	(ix + -12), bc
	call	__ishl
	ld	(ix + -15), hl
	ld	hl, 2000
	ld	bc, 0
BB0_6:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_7
	ld	a, (iy)
	ld	iyl, a
	ld	de, (ix + -15)
	ld	a, e
	and	a, iyl
	or	a, a
	ld	a, 1
	jq	nz, BB0_18
	ld	a, 0
BB0_18:
	and	a, 1
	ld	de, 0
	ld	e, a
	push	bc
	pop	iy
	add	iy, de
	dec	hl
	lea	bc, iy + 0
	ld	iy, (ix + -3)
	jq	BB0_6
BB0_7:
	push	bc
	pop	iy
	ld	de, -1000
	add	iy, de
	ld	hl, 1000
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	push	bc
	pop	hl
	ld	bc, 1001
	or	a, a
	sbc	hl, bc
	jq	nc, BB0_9
	push	de
	pop	iy
BB0_9:
	lea	hl, iy + 0
	ld	de, (ix + -9)
	or	a, a
	sbc	hl, de
	ld	a, 1
	jq	c, BB0_11
	ld	a, 0
BB0_11:
	bit	0, a
	jq	nz, BB0_13
	ld	iy, (ix + -9)
BB0_13:
	bit	0, a
	ld	de, (ix + -3)
	ld	hl, (ix + -12)
	jq	nz, BB0_15
	ld	de, (ix + -6)
BB0_15:
	inc	hl
	ld	(ix + -9), iy
	ld	(ix + -6), de
	ld	iy, (ix + -3)
	jq	BB0_3
BB0_5:
	inc	iy
	ld	de, -2727936
	jq	BB0_1
BB0_2:
	ld	hl, (ix + -6)
	ld	(_csprng_state), hl
	ld	sp, ix
	pop	ix
	jp	_hashlib_CSPRNGAddEntropy
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_CSPRNGAddEntropy
_hashlib_CSPRNGAddEntropy:
	ld	de, 0
	ld	iy, (_csprng_state)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_1
BB1_4:
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_5
	ld	a, 0
	ret
BB1_1:
	ld	bc, 128
BB1_2:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	z, BB1_4
	ld	c, (iy)
	ld	hl, _csprng_state+3
	add	hl, de
	ld	a, (hl)
	xor	a, c
	ld	bc, 128
	ld	(hl), a
	inc	de
	jq	BB1_2
BB1_5:
	ld	a, 1
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_CSPRNGRandom
_hashlib_CSPRNGRandom:
	ld	hl, -38
	call	__frameset
	ld	e, 0
	ld	bc, 0
	ld	iy, -1898304
	ld	d, -5
	lea	hl, ix + -32
	ld	(ix + -35), hl
BB2_1:
	ld	hl, (_csprng_state)
	ld	a, d
	or	a, a
	jq	z, BB2_4
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_4
	ld	(ix + -38), d
	call	_hashlib_CSPRNGInit
	ld	d, (ix + -38)
	ld	e, 0
	ld	iy, -1898304
	ld	bc, 0
	inc	d
	jq	BB2_1
BB2_4:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_5
	jq	BB2_14
BB2_5:
	ld	(iy), bc
	ld	(iy + 3), e
	ld	hl, (_csprng_state)
	ld	(ix + -38), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_6
	jq	BB2_13
BB2_6:
	ld	de, 4
BB2_7:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	z, BB2_8
	ld	hl, (ix + -38)
	ld	l, (hl)
	lea	de, iy + 0
	add	iy, bc
	ld	a, (iy)
	xor	a, l
	ld	(iy), a
	push	de
	pop	iy
	ld	de, 4
	inc	bc
	jq	BB2_7
BB2_8:
	ld	hl, -1898288
	push	hl
	ld	hl, -1870640
	push	hl
	call	_hashlib_Sha256Init
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 128
	push	hl
	ld	hl, _csprng_state+3
	push	hl
	ld	hl, -1870640
	push	hl
	call	_hashlib_Sha256Update
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -35)
	push	hl
	ld	hl, -1870640
	push	hl
	call	_hashlib_Sha256Final
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
BB2_10:
	ld	bc, 255
	call	__iand
	ld	a, l
	cp	a, 32
	jq	nc, BB2_11
	push	hl
	pop	de
	ld	bc, (ix + -35)
	push	bc
	pop	iy
	add	iy, de
	ld	(ix + -38), iy
	ld	de, -1898304
	push	de
	pop	iy
	ld	a, (iy)
	ld	iy, (ix + -38)
	xor	a, (iy)
	push	de
	pop	iy
	ld	(iy), a
	push	hl
	pop	de
	inc	de
	push	bc
	pop	iy
	add	iy, de
	ld	(ix + -38), iy
	ld	de, -1898303
	push	de
	pop	iy
	ld	a, (iy)
	ld	iy, (ix + -38)
	xor	a, (iy)
	push	de
	pop	iy
	ld	(iy), a
	push	hl
	pop	iy
	ld	de, 2
	add	iy, de
	lea	de, iy + 0
	push	bc
	pop	iy
	add	iy, de
	ld	(ix + -38), iy
	ld	de, -1898302
	push	de
	pop	iy
	ld	a, (iy)
	ld	iy, (ix + -38)
	xor	a, (iy)
	push	de
	pop	iy
	ld	(iy), a
	push	hl
	pop	iy
	ld	de, 3
	add	iy, de
	lea	de, iy + 0
	push	bc
	pop	iy
	add	iy, de
	lea	bc, iy + 0
	ld	de, -1898301
	push	de
	pop	iy
	ld	a, (iy)
	push	bc
	pop	iy
	xor	a, (iy)
	push	de
	pop	iy
	ld	(iy), a
	ld	de, 4
	add	hl, de
	jq	BB2_10
BB2_11:
	call	_hashlib_CSPRNGAddEntropy
	ld	hl, -1898304
	push	hl
	pop	iy
	ld	bc, (iy)
	ld	e, (iy + 3)
BB2_13:
BB2_14:
	push	bc
	pop	hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_RandomBytes
_hashlib_RandomBytes:
	ld	hl, -10
	call	__frameset
	ld	de, (ix + 9)
	ld	iy, 0
	ld	(ix + -7), de
BB3_1:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	nc, BB3_2
	ld	(ix + -10), iy
	call	_hashlib_CSPRNGRandom
	ld	(ix + -4), hl
	ld	(ix + -1), e
	ld	de, (ix + -10)
	ld	iy, (ix + 6)
	add	iy, de
	ld	bc, (ix + -7)
	push	bc
	pop	hl
	ld	de, 4
	or	a, a
	sbc	hl, de
	jq	c, BB3_5
	ld	bc, 4
BB3_5:
	push	bc
	pea	ix + -4
	push	iy
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + -10)
	ld	de, 4
	add	iy, de
	ld	de, -4
	ld	hl, (ix + -7)
	add	hl, de
	ld	(ix + -7), hl
	ld	de, (ix + 9)
	jq	BB3_1
BB3_2:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_b64decode
_hashlib_b64decode:
	ld	hl, -9
	call	__frameset
	ld	bc, (ix + 6)
	ld	hl, (ix + 12)
	ld	(ix + -3), hl
	ld	iy, -1
	push	bc
	pop	de
	push	bc
	pop	hl
	ld	bc, (ix + 9)
	add	hl, bc
	push	hl
	pop	bc
BB4_1:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_21
	ld	hl, (ix + -3)
	ld	a, (hl)
	cp	a, 0
	call	__setflag
	jq	m, BB4_24
	ld	(ix + -6), bc
	ld	bc, 0
	ld	c, a
	ld	hl, _index_64
	add	hl, bc
	ld	l, (hl)
	ld	a, l
	cp	a, -1
	jq	z, BB4_24
	ld	iy, (ix + -3)
	ld	a, (iy + 1)
	cp	a, 0
	call	__setflag
	jq	m, BB4_23
	ld	(ix + -9), de
	ld	bc, 0
	ld	c, a
	ld	iy, _index_64
	add	iy, bc
	ld	e, (iy)
	ld	a, e
	cp	a, -1
	jq	z, BB4_23
	ld	a, l
	ld	b, 2
	call	__bshl
	ld	l, a
	ld	a, e
	ld	b, 4
	call	__bshru
	and	a, 3
	add	a, l
	ld	iy, (ix + -9)
	ld	(iy), a
	inc	iy
	lea	hl, iy + 0
	ld	bc, (ix + -6)
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_21
	ld	iy, (ix + -3)
	ld	a, (iy + 2)
	cp	a, 0
	call	__setflag
	jq	m, BB4_23
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	hl, _index_64
	add	hl, bc
	ld	c, (hl)
	ld	a, c
	cp	a, -1
	ld	iy, -1
	jq	z, BB4_24
	ld	a, e
	ld	b, 4
	call	__bshl
	ld	l, a
	ld	a, c
	ld	b, 2
	call	__bshru
	and	a, 15
	add	a, l
	ld	iy, (ix + -9)
	ld	(iy + 1), a
	lea	hl, iy + 2
	ld	de, (ix + -6)
	or	a, a
	sbc	hl, de
	jq	nc, BB4_21
	ld	iy, (ix + -3)
	ld	a, (iy + 3)
	cp	a, 0
	call	__setflag
	jq	m, BB4_23
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, a
	ld	hl, _index_64
	add	hl, de
	ld	l, (hl)
	ld	a, l
	cp	a, -1
	jq	z, BB4_23
	ld	a, c
	ld	b, 6
	call	__bshl
	ld	c, a
	ld	a, l
	or	a, c
	ld	bc, (ix + -6)
	ld	iy, (ix + -9)
	ld	(iy + 2), a
	lea	iy, iy + 3
	lea	de, iy + 0
	ld	iy, (ix + -3)
	lea	iy, iy + 4
	ld	(ix + -3), iy
	ld	iy, -1
	jq	BB4_1
BB4_21:
	ld	iy, 0
BB4_24:
	lea	hl, iy + 0
	ld	sp, ix
	pop	ix
	ret
BB4_23:
	ld	iy, -1
	jq	BB4_24
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_b64encode
_hashlib_b64encode:
	ld	hl, -10
	call	__frameset
	ld	iy, (ix + 6)
	ld	hl, (ix + 9)
	ld	de, (ix + 12)
	ld	a, 2
	ld	bc, 0
	ld	(ix + -3), hl
	add	hl, de
	ex	de, hl
BB5_1:
	ld	hl, (ix + -3)
	or	a, a
	sbc	hl, de
	jq	nc, BB5_10
	ld	hl, (ix + -3)
	ld	b, a
	ld	a, (hl)
	ld	(ix + -10), a
	ld	(ix + -9), de
	call	__bshru
	ld	bc, 0
	ld	c, a
	lea	hl, iy + 0
	ld	iy, _Base64Code
	add	iy, bc
	ld	a, (iy)
	ld	(ix + -6), hl
	ld	(hl), a
	ld	a, (ix + -10)
	ld	b, 4
	call	__bshl
	and	a, 48
	ld	iy, (ix + -3)
	inc	iy
	lea	hl, iy + 0
	ld	de, (ix + -9)
	or	a, a
	sbc	hl, de
	jq	nc, BB5_6
	ld	iy, (ix + -3)
	ld	e, (iy + 1)
	ld	l, a
	ld	a, e
	call	__bshru
	add	a, l
	ld	bc, 0
	ld	c, a
	ld	hl, _Base64Code
	add	hl, bc
	ld	a, (hl)
	ld	iy, (ix + -6)
	ld	(iy + 1), a
	ld	a, e
	ld	b, 2
	call	__bshl
	and	a, 60
	ld	iy, (ix + -3)
	lea	hl, iy + 2
	ld	bc, (ix + -9)
	or	a, a
	sbc	hl, bc
	jq	nc, BB5_7
	ld	iy, (ix + -3)
	ld	c, (iy + 2)
	ld	l, a
	ld	a, c
	ld	b, 6
	call	__bshru
	add	a, l
	ld	de, 0
	ld	e, a
	ld	hl, _Base64Code
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + -6)
	ld	(iy + 2), a
	ld	a, c
	and	a, 63
	ld	de, 0
	ld	e, a
	ld	hl, _Base64Code
	add	hl, de
	ld	a, (hl)
	lea	hl, iy + 4
	ld	(iy + 3), a
	ld	iy, (ix + -3)
	lea	iy, iy + 3
	ld	(ix + -3), iy
	push	hl
	pop	iy
	ld	bc, 0
	ld	a, 2
	ld	de, (ix + -9)
	jq	BB5_1
BB5_6:
	ld	hl, (ix + -6)
	inc	hl
	ld	(ix + -3), hl
	ld	hl, 2
	jq	BB5_8
BB5_7:
	ld	iy, (ix + -6)
	lea	hl, iy + 2
	ld	(ix + -3), hl
	ld	hl, 3
BB5_8:
	ld	(ix + -9), hl
	ld	bc, 0
	ld	c, a
	ld	hl, _Base64Code
	add	hl, bc
	ld	a, (hl)
	ld	iy, (ix + -6)
	ld	de, (ix + -9)
	add	iy, de
	ld	hl, (ix + -3)
	ld	(hl), a
	ld	bc, 0
BB5_10:
	ld	(iy), 0
	push	bc
	pop	hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_xor_buf
_xor_buf:
	ld	hl, -3
	call	__frameset
	ld	de, (ix + 6)
	ld	iy, (ix + 9)
	ld	bc, (ix + 12)
BB6_1:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB6_3
	ld	a, (iy)
	ld	(ix + -3), iy
	ex	de, hl
	xor	a, (hl)
	ld	iy, (ix + -3)
	ld	(iy), a
	dec	bc
	inc	hl
	ex	de, hl
	ld	iy, (ix + -3)
	inc	iy
	jq	BB6_1
BB6_3:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_aes_SubWord
_aes_SubWord:
	ld	hl, -9
	call	__frameset
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	ld	iy, 15
	ld	l, 4
	call	__lshru
	push	bc
	pop	hl
	lea	bc, iy + 0
	call	__iand
	push	hl
	pop	de
	ld	hl, (ix + 6)
	call	__iand
	push	hl
	pop	iy
	ex	de, hl
	ld	c, 4
	call	__ishl
	push	hl
	pop	de
	ld	hl, _aes_sbox
	add	hl, de
	lea	de, iy + 0
	add	hl, de
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix + -3), hl
	ld	l, 12
	ld	bc, (ix + 6)
	ld	e, (ix + 9)
	ld	a, e
	call	__lshru
	push	bc
	pop	hl
	ld	iy, 15
	lea	bc, iy + 0
	call	__iand
	ld	(ix + -6), hl
	ld	l, 8
	ld	bc, (ix + 6)
	ld	a, e
	call	__lshru
	push	bc
	pop	hl
	lea	bc, iy + 0
	call	__iand
	push	hl
	pop	de
	ld	hl, (ix + -6)
	ld	c, 4
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	bc, 0
	ld	c, a
	ld	d, 0
	ld	a, d
	ld	l, 8
	call	__lshl
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix + -3)
	ld	a, d
	call	__ladd
	ld	(ix + -3), hl
	ld	(ix + -6), e
	ld	l, 20
	ld	iy, (ix + 6)
	lea	bc, iy + 0
	ld	a, (ix + 9)
	call	__lshru
	push	bc
	pop	hl
	ld	de, 15
	push	de
	pop	bc
	call	__iand
	ld	(ix + -9), hl
	ld	l, 16
	lea	bc, iy + 0
	ld	a, (ix + 9)
	ld	iyl, a
	ex	de, hl
	ld	iyh, e
	ex	de, hl
	call	__lshru
	push	bc
	pop	hl
	push	de
	pop	bc
	call	__iand
	push	hl
	pop	de
	ld	hl, (ix + -9)
	ld	c, 4
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	bc, 0
	ld	c, a
	xor	a, a
	ex	de, hl
	ld	e, iyh
	ex	de, hl
	call	__lshl
	ld	hl, (ix + -3)
	ld	e, (ix + -6)
	call	__ladd
	ld	(ix + -3), hl
	ld	(ix + -6), e
	ld	l, 28
	ld	de, (ix + 6)
	push	de
	pop	bc
	ex	de, hl
	ld	d, iyl
	ex	de, hl
	ld	a, h
	call	__lshru
	push	bc
	pop	iy
	ld	l, 24
	push	de
	pop	bc
	ld	a, h
	call	__lshru
	push	bc
	pop	hl
	ld	bc, 15
	call	__iand
	push	hl
	pop	de
	lea	hl, iy + 0
	ld	c, 4
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	bc, 0
	ld	c, a
	xor	a, a
	ld	l, 24
	call	__lshl
	ld	hl, (ix + -3)
	ld	e, (ix + -6)
	call	__ladd
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_AESLoadKey
_hashlib_AESLoadKey:
	ld	hl, -25
	call	__frameset
	ld	de, (ix + 12)
	xor	a, a
	ld	bc, 128
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nz, BB8_2
	ld	(ix + -19), a
	ld	bc, 4
	ld	hl, 44
	ld	(ix + -9), hl
	jq	BB8_6
BB8_2:
	ld	bc, 192
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nz, BB8_4
	ld	(ix + -19), a
	ld	hl, 52
	ld	(ix + -9), hl
	ld	bc, 6
	jq	BB8_6
BB8_4:
	ld	bc, 256
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nz, BB8_20
	ld	bc, 8
	ld	hl, 60
	ld	(ix + -9), hl
	ld	a, 1
	ld	(ix + -19), a
BB8_6:
	ld	iy, (ix + 9)
	ld	(iy), de
	ld	(ix + -3), iy
	lea	hl, iy + 3
	ld	(ix + -12), hl
	ld	iy, (ix + 6)
	lea	iy, iy + 3
	push	bc
	pop	de
	ld	(ix + -6), bc
BB8_7:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB8_9
	ld	a, (iy + -3)
	ld	bc, 0
	ld	c, a
	ld	h, 0
	ld	a, h
	ld	l, 24
	call	__lshl
	ld	(ix + -18), bc
	ld	(ix + -15), de
	ld	d, a
	ld	a, (iy + -2)
	ld	bc, 0
	ld	c, a
	ld	a, h
	ld	l, 16
	call	__lshl
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix + -18)
	ld	a, d
	call	__ladd
	ld	(ix + -18), hl
	ld	a, (iy + -1)
	ld	bc, 0
	ld	c, a
	xor	a, a
	ld	l, 8
	call	__lshl
	ld	hl, (ix + -18)
	call	__ladd
	ld	a, (iy)
	ld	bc, 0
	ld	c, a
	xor	a, a
	call	__ladd
	lea	bc, iy + 0
	ld	iy, (ix + -12)
	ld	(iy), hl
	ld	(iy + 3), e
	ld	de, (ix + -15)
	dec	de
	lea	iy, iy + 4
	ld	(ix + -12), iy
	push	bc
	pop	iy
	lea	iy, iy + 4
	jq	BB8_7
BB8_9:
	ld	c, 2
	ld	hl, (ix + -6)
	call	__ishl
	ld	bc, (ix + -6)
	dec	hl
	ld	(ix + -15), hl
	push	bc
	pop	de
	ld	hl, (ix + -9)
BB8_10:
	or	a, a
	sbc	hl, de
	jq	z, BB8_19
	ld	iy, (ix + -3)
	ex	de, hl
	ld	de, (ix + -15)
	add	iy, de
	ld	de, (iy)
	ld	a, (iy + 3)
	ld	(ix + -12), hl
	call	__iremu
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix + -18), iy
	jq	nz, BB8_13
	ld	hl, (ix + -12)
	dec	hl
	ld	(ix + -22), hl
	push	de
	pop	bc
	ld	h, a
	ld	l, 8
	call	__lshl
	ld	(ix + -25), bc
	ld	iyl, a
	push	de
	pop	bc
	ld	a, h
	ld	l, 24
	call	__lshru
	ld	hl, (ix + -25)
	ld	e, iyl
	call	__lor
	push	de
	push	hl
	call	_aes_SubWord
	ld	(ix + -25), hl
	ld	a, e
	pop	hl
	pop	hl
	ld	hl, (ix + -22)
	ld	bc, (ix + -6)
	call	__idivu
	ld	c, 2
	call	__ishl
	push	hl
	pop	de
	ld	iy, L___const.hashlib_AESLoadKey.Rcon
	add	iy, de
	ld	hl, (iy)
	ld	e, (iy + 3)
	ld	bc, (ix + -25)
	call	__lxor
	push	hl
	pop	bc
	ld	a, e
	jq	BB8_18
BB8_13:
	ld	(ix + -25), a
	ld	(ix + -22), de
	ld	a, (ix + -19)
	ld	e, 1
	xor	a, e
	bit	0, a
	jq	nz, BB8_17
	ld	bc, 4
	or	a, a
	sbc	hl, bc
	jq	nz, BB8_17
	ld	a, (ix + -25)
	ld	l, a
	push	hl
	ld	hl, (ix + -22)
	push	hl
	call	_aes_SubWord
	push	hl
	pop	bc
	ld	a, e
	pop	hl
	pop	hl
	jq	BB8_18
BB8_17:
	ld	bc, (ix + -22)
	ld	a, (ix + -25)
BB8_18:
	ld	iy, (ix + -3)
	ld	hl, (iy + 3)
	ld	e, (iy + 6)
	call	__lxor
	ld	bc, (ix + -18)
	push	bc
	pop	iy
	ld	(iy + 4), hl
	ld	(iy + 7), e
	ld	de, (ix + -12)
	inc	de
	ld	iy, (ix + -3)
	lea	iy, iy + 4
	ld	(ix + -3), iy
	ld	bc, (ix + -6)
	ld	hl, (ix + -9)
	jq	BB8_10
BB8_19:
	ld	a, 1
BB8_20:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_aes_AddRoundKey
_aes_AddRoundKey:
	ld	hl, -3
	call	__frameset
	ld	iy, (ix + 9)
	ld	de, (iy)
	ld	h, (iy + 3)
	ld	l, 24
	push	de
	pop	bc
	ld	a, h
	call	__lshru
	ld	(ix + -3), bc
	ld	l, 16
	push	de
	pop	bc
	ld	a, h
	call	__lshru
	ld	iy, (ix + 6)
	ld	a, (iy)
	ld	hl, (ix + -3)
	xor	a, l
	ld	(iy), a
	ld	a, (iy + 4)
	xor	a, c
	ld	(iy + 4), a
	ld	a, (iy + 8)
	xor	a, d
	ld	(iy + 8), a
	ld	a, (iy + 12)
	xor	a, e
	ld	(iy + 12), a
	ld	hl, (ix + 9)
	push	hl
	pop	iy
	ld	de, (iy + 4)
	ld	h, (iy + 7)
	push	de
	pop	bc
	ld	a, h
	ld	l, 24
	call	__lshru
	ld	(ix + -3), bc
	push	de
	pop	bc
	ld	a, h
	ld	l, 16
	call	__lshru
	ld	iy, (ix + 6)
	ld	a, (iy + 1)
	ld	hl, (ix + -3)
	xor	a, l
	ld	(iy + 1), a
	ld	a, (iy + 5)
	xor	a, c
	ld	(iy + 5), a
	ld	a, (iy + 9)
	xor	a, d
	ld	(iy + 9), a
	ld	a, (iy + 13)
	xor	a, e
	ld	(iy + 13), a
	ld	hl, (ix + 9)
	push	hl
	pop	iy
	ld	de, (iy + 8)
	ld	h, (iy + 11)
	push	de
	pop	bc
	ld	a, h
	ld	l, 24
	call	__lshru
	ld	(ix + -3), bc
	push	de
	pop	bc
	ld	a, h
	ld	l, 16
	call	__lshru
	ld	iy, (ix + 6)
	ld	a, (iy + 2)
	ld	hl, (ix + -3)
	xor	a, l
	ld	(iy + 2), a
	ld	a, (iy + 6)
	xor	a, c
	ld	(iy + 6), a
	ld	a, (iy + 10)
	xor	a, d
	ld	(iy + 10), a
	ld	a, (iy + 14)
	xor	a, e
	ld	(iy + 14), a
	ld	hl, (ix + 9)
	push	hl
	pop	iy
	ld	de, (iy + 12)
	ld	h, (iy + 15)
	push	de
	pop	bc
	ld	a, h
	ld	l, 24
	call	__lshru
	ld	(ix + -3), bc
	push	de
	pop	bc
	ld	a, h
	ld	l, 16
	call	__lshru
	ld	iy, (ix + 6)
	ld	a, (iy + 3)
	ld	hl, (ix + -3)
	xor	a, l
	ld	(iy + 3), a
	ld	a, (iy + 7)
	xor	a, c
	ld	(iy + 7), a
	ld	a, (iy + 11)
	xor	a, d
	ld	(iy + 11), a
	ld	a, (iy + 15)
	xor	a, e
	ld	(iy + 15), a
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_aes_SubBytes
_aes_SubBytes:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	iy, _aes_sbox
	ld	a, (hl)
	ld	de, 0
	ld	e, a
	ld	b, 4
	push	de
	pop	hl
	ld	c, b
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	lea	hl, iy + 0
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy), a
	ld	a, (iy + 1)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 1), a
	ld	a, (iy + 2)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	(iy + 2), a
	ld	a, (iy + 3)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	(iy + 3), a
	ld	a, (iy + 4)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	iy, _aes_sbox
	lea	hl, iy + 0
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 4), a
	ld	a, (iy + 5)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 5), a
	ld	a, (iy + 6)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	(iy + 6), a
	ld	a, (iy + 7)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	iy, _aes_sbox
	lea	hl, iy + 0
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 7), a
	ld	a, (iy + 8)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 8), a
	ld	a, (iy + 9)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 9), a
	ld	a, (iy + 10)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 10), a
	ld	a, (iy + 11)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 11), a
	ld	a, (iy + 12)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	(iy + 12), a
	ld	a, (iy + 13)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	(iy + 13), a
	ld	a, (iy + 14)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	ld	b, 4
	call	__ishru
	and	a, 15
	ld	e, a
	ld	c, b
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	(iy + 14), a
	ld	a, (iy + 15)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_sbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	(iy + 15), a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_aes_InvSubBytes
_aes_InvSubBytes:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	iy, _aes_invsbox
	ld	a, (hl)
	ld	de, 0
	ld	e, a
	ld	b, 4
	push	de
	pop	hl
	ld	c, b
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	lea	hl, iy + 0
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy), a
	ld	a, (iy + 1)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_invsbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 1), a
	ld	a, (iy + 2)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_invsbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	(iy + 2), a
	ld	a, (iy + 3)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_invsbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	(iy + 3), a
	ld	a, (iy + 4)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	iy, _aes_invsbox
	lea	hl, iy + 0
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 4), a
	ld	a, (iy + 5)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_invsbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 5), a
	ld	a, (iy + 6)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_invsbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	(iy + 6), a
	ld	a, (iy + 7)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	iy, _aes_invsbox
	lea	hl, iy + 0
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 7), a
	ld	a, (iy + 8)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_invsbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 8), a
	ld	a, (iy + 9)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_invsbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 9), a
	ld	a, (iy + 10)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_invsbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 10), a
	ld	a, (iy + 11)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_invsbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 11), a
	ld	a, (iy + 12)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_invsbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	(iy + 12), a
	ld	a, (iy + 13)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_invsbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	(iy + 13), a
	ld	a, (iy + 14)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	ld	b, 4
	call	__ishru
	and	a, 15
	ld	e, a
	ld	c, b
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_invsbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	(iy + 14), a
	ld	a, (iy + 15)
	ld	e, a
	push	de
	pop	hl
	ld	c, 4
	call	__ishru
	and	a, 15
	ld	e, a
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _aes_invsbox
	add	hl, bc
	add	hl, de
	ld	a, (hl)
	ld	(iy + 15), a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_aes_ShiftRows
_aes_ShiftRows:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	a, (iy + 4)
	ld	l, (iy + 5)
	ld	(iy + 4), l
	ld	l, (iy + 6)
	ld	(iy + 5), l
	ld	l, (iy + 7)
	ld	(iy + 6), l
	ld	(iy + 7), a
	ld	a, (iy + 8)
	ld	l, (iy + 10)
	ld	(iy + 8), l
	ld	(iy + 10), a
	ld	a, (iy + 9)
	ld	l, (iy + 11)
	ld	(iy + 9), l
	ld	(iy + 11), a
	ld	a, (iy + 12)
	ld	l, (iy + 15)
	ld	(iy + 12), l
	ld	l, (iy + 14)
	ld	(iy + 15), l
	ld	l, (iy + 13)
	ld	(iy + 14), l
	ld	(iy + 13), a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_aes_InvShiftRows
_aes_InvShiftRows:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	a, (iy + 7)
	ld	l, (iy + 6)
	ld	(iy + 7), l
	ld	l, (iy + 5)
	ld	(iy + 6), l
	ld	l, (iy + 4)
	ld	(iy + 5), l
	ld	(iy + 4), a
	ld	a, (iy + 11)
	ld	l, (iy + 9)
	ld	(iy + 11), l
	ld	(iy + 9), a
	ld	a, (iy + 10)
	ld	l, (iy + 8)
	ld	(iy + 10), l
	ld	(iy + 8), a
	ld	a, (iy + 15)
	ld	l, (iy + 12)
	ld	(iy + 15), l
	ld	l, (iy + 13)
	ld	(iy + 12), l
	ld	l, (iy + 14)
	ld	(iy + 13), l
	ld	(iy + 14), a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_aes_MixColumns
_aes_MixColumns:
	ld	hl, -13
	call	__frameset
	ld	iy, (ix + 6)
	ld	e, (iy)
	ld	(ix + -2), e
	ld	a, (iy + 4)
	ld	(ix + -1), a
	ld	l, (iy + 8)
	ld	(ix + -3), l
	ld	l, (iy + 12)
	ld	(ix + -6), l
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	bc, 6
	call	__imulu
	push	hl
	pop	de
	ld	iy, _gf_mul
	lea	hl, iy + 0
	add	hl, de
	ld	(ix + -9), hl
	ld	l, (hl)
	ld	(ix + -13), l
	or	a, a
	sbc	hl, hl
	ld	l, a
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	bc, 0
	push	bc
	pop	hl
	ld	e, (ix + -3)
	ld	l, e
	ld	a, (ix + -6)
	ld	c, a
	ld	(ix + -12), bc
	xor	a, e
	xor	a, (ix + -13)
	xor	a, (iy + 1)
	lea	de, iy + 0
	ld	iy, (ix + 6)
	ld	(iy), a
	push	de
	pop	iy
	ld	a, (iy)
	xor	a, (ix + -2)
	ld	bc, 6
	call	__imulu
	push	hl
	pop	de
	ld	hl, _gf_mul
	push	hl
	pop	iy
	add	iy, de
	xor	a, (ix + -6)
	xor	a, (iy + 1)
	lea	hl, iy + 0
	ld	iy, (ix + 6)
	ld	(iy + 4), a
	ld	a, (ix + -1)
	xor	a, (ix + -2)
	ld	e, a
	ld	a, (hl)
	xor	a, e
	ld	(ix + -2), a
	ld	hl, (ix + -12)
	call	__imulu
	push	hl
	pop	de
	ld	hl, _gf_mul
	push	hl
	pop	iy
	add	iy, de
	ld	a, (iy + 1)
	lea	hl, iy + 0
	xor	a, (ix + -2)
	ld	iy, (ix + 6)
	ld	(iy + 8), a
	ld	a, (ix + -3)
	xor	a, (ix + -1)
	ld	iy, (ix + -9)
	xor	a, (iy + 1)
	xor	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 12), a
	ld	e, (iy + 1)
	ld	(ix + -2), e
	ld	a, (iy + 5)
	ld	(ix + -1), a
	ld	l, (iy + 9)
	ld	(ix + -3), l
	ld	l, (iy + 13)
	ld	(ix + -6), l
	ld	iy, 0
	lea	hl, iy + 0
	ld	l, e
	call	__imulu
	push	hl
	pop	de
	ld	hl, _gf_mul
	add	hl, de
	ld	(ix + -9), hl
	ld	l, (hl)
	ld	(ix + -13), l
	lea	hl, iy + 0
	ld	l, a
	call	__imulu
	push	hl
	pop	de
	ld	hl, _gf_mul
	add	hl, de
	push	hl
	pop	iy
	ld	bc, 0
	push	bc
	pop	hl
	ld	e, (ix + -3)
	ld	l, e
	ld	a, (ix + -6)
	ld	c, a
	ld	(ix + -12), bc
	xor	a, e
	xor	a, (ix + -13)
	xor	a, (iy + 1)
	lea	de, iy + 0
	ld	iy, (ix + 6)
	ld	(iy + 1), a
	push	de
	pop	iy
	ld	a, (iy)
	xor	a, (ix + -2)
	ld	bc, 6
	call	__imulu
	push	hl
	pop	de
	ld	hl, _gf_mul
	push	hl
	pop	iy
	add	iy, de
	xor	a, (ix + -6)
	xor	a, (iy + 1)
	lea	hl, iy + 0
	ld	iy, (ix + 6)
	ld	(iy + 5), a
	ld	a, (ix + -1)
	xor	a, (ix + -2)
	ld	e, a
	ld	a, (hl)
	xor	a, e
	ld	(ix + -2), a
	ld	hl, (ix + -12)
	call	__imulu
	push	hl
	pop	de
	ld	hl, _gf_mul
	push	hl
	pop	iy
	add	iy, de
	ld	a, (iy + 1)
	lea	hl, iy + 0
	xor	a, (ix + -2)
	ld	iy, (ix + 6)
	ld	(iy + 9), a
	ld	a, (ix + -3)
	xor	a, (ix + -1)
	ld	iy, (ix + -9)
	xor	a, (iy + 1)
	xor	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 13), a
	ld	e, (iy + 2)
	ld	(ix + -2), e
	ld	a, (iy + 6)
	ld	(ix + -1), a
	ld	l, (iy + 10)
	ld	(ix + -3), l
	ld	l, (iy + 14)
	ld	(ix + -6), l
	ld	iy, 0
	lea	hl, iy + 0
	ld	l, e
	call	__imulu
	push	hl
	pop	de
	ld	hl, _gf_mul
	add	hl, de
	ld	(ix + -9), hl
	ld	l, (hl)
	ld	(ix + -13), l
	lea	hl, iy + 0
	ld	l, a
	call	__imulu
	push	hl
	pop	de
	ld	hl, _gf_mul
	add	hl, de
	push	hl
	pop	iy
	ld	bc, 0
	push	bc
	pop	hl
	ld	e, (ix + -3)
	ld	l, e
	ld	a, (ix + -6)
	ld	c, a
	ld	(ix + -12), bc
	xor	a, e
	xor	a, (ix + -13)
	xor	a, (iy + 1)
	lea	de, iy + 0
	ld	iy, (ix + 6)
	ld	(iy + 2), a
	push	de
	pop	iy
	ld	a, (iy)
	xor	a, (ix + -2)
	ld	bc, 6
	call	__imulu
	push	hl
	pop	de
	ld	hl, _gf_mul
	push	hl
	pop	iy
	add	iy, de
	xor	a, (ix + -6)
	xor	a, (iy + 1)
	lea	hl, iy + 0
	ld	iy, (ix + 6)
	ld	(iy + 6), a
	ld	a, (ix + -1)
	xor	a, (ix + -2)
	ld	e, a
	ld	a, (hl)
	xor	a, e
	ld	(ix + -2), a
	ld	hl, (ix + -12)
	call	__imulu
	push	hl
	pop	de
	ld	hl, _gf_mul
	push	hl
	pop	iy
	add	iy, de
	ld	a, (iy + 1)
	lea	hl, iy + 0
	xor	a, (ix + -2)
	ld	iy, (ix + 6)
	ld	(iy + 10), a
	ld	a, (ix + -3)
	xor	a, (ix + -1)
	ld	iy, (ix + -9)
	xor	a, (iy + 1)
	xor	a, (hl)
	ld	iy, (ix + 6)
	ld	(iy + 14), a
	ld	e, (iy + 3)
	ld	(ix + -1), e
	ld	a, (iy + 7)
	ld	(ix + -9), a
	ld	l, (iy + 11)
	ld	(ix + -2), l
	ld	l, (iy + 15)
	ld	(ix + -3), l
	ld	iy, 0
	lea	hl, iy + 0
	ld	l, e
	call	__imulu
	push	hl
	pop	de
	ld	hl, _gf_mul
	add	hl, de
	ld	(ix + -6), hl
	ld	l, (hl)
	ld	(ix + -13), l
	lea	hl, iy + 0
	ld	l, a
	call	__imulu
	push	hl
	pop	de
	ld	hl, _gf_mul
	add	hl, de
	push	hl
	pop	iy
	ld	de, 0
	push	de
	pop	bc
	ld	l, (ix + -2)
	ld	c, l
	ld	a, (ix + -3)
	ld	e, a
	ld	(ix + -12), de
	xor	a, l
	xor	a, (ix + -13)
	xor	a, (iy + 1)
	lea	hl, iy + 0
	ld	iy, (ix + 6)
	ld	(iy + 3), a
	ld	a, (hl)
	xor	a, (ix + -1)
	push	bc
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	de
	ld	hl, _gf_mul
	push	hl
	pop	iy
	add	iy, de
	xor	a, (ix + -3)
	xor	a, (iy + 1)
	lea	bc, iy + 0
	ld	iy, (ix + 6)
	ld	(iy + 7), a
	ld	d, (ix + -9)
	ld	a, d
	xor	a, (ix + -1)
	ld	e, a
	push	bc
	pop	hl
	ld	a, (hl)
	xor	a, e
	ld	e, a
	ld	hl, (ix + -12)
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _gf_mul
	add	iy, bc
	ld	a, (iy + 1)
	lea	hl, iy + 0
	xor	a, e
	ld	iy, (ix + 6)
	ld	(iy + 11), a
	lea	bc, iy + 0
	ld	a, (ix + -2)
	xor	a, d
	ld	iy, (ix + -6)
	xor	a, (iy + 1)
	xor	a, (hl)
	push	bc
	pop	iy
	ld	(iy + 15), a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_aes_InvMixColumns
_aes_InvMixColumns:
	ld	hl, -11
	call	__frameset
	ld	iy, (ix + 6)
	ld	l, (iy)
	ld	a, (iy + 4)
	ld	e, (iy + 8)
	ld	(ix + -9), e
	ld	e, (iy + 12)
	ld	(ix + -10), e
	ld	de, 0
	ld	e, l
	ld	bc, 6
	push	de
	pop	hl
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _gf_mul
	add	iy, bc
	ld	(ix + -3), iy
	ld	l, (iy + 5)
	ld	(ix + -11), l
	ld	e, a
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _gf_mul
	add	iy, bc
	ld	(ix + -6), iy
	ld	a, (iy + 3)
	xor	a, (ix + -11)
	ld	(ix + -11), a
	ld	a, (ix + -9)
	ld	e, a
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _gf_mul
	add	iy, bc
	ld	(ix + -9), iy
	ld	a, (iy + 4)
	xor	a, (ix + -11)
	ld	(ix + -11), a
	ld	a, (ix + -10)
	ld	e, a
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _gf_mul
	push	hl
	pop	iy
	add	iy, bc
	ld	a, (iy + 2)
	lea	bc, iy + 0
	xor	a, (ix + -11)
	ld	hl, (ix + 6)
	ld	(hl), a
	ld	iy, (ix + -6)
	ld	a, (iy + 5)
	ld	iy, (ix + -3)
	xor	a, (iy + 2)
	ld	l, a
	ld	iy, (ix + -9)
	ld	a, (iy + 3)
	xor	a, l
	ld	l, a
	push	bc
	pop	iy
	ld	a, (iy + 4)
	xor	a, l
	ld	iy, (ix + 6)
	ld	(iy + 4), a
	ld	iy, (ix + -6)
	ld	a, (iy + 2)
	ld	iy, (ix + -3)
	xor	a, (iy + 4)
	ld	l, a
	ld	iy, (ix + -9)
	ld	a, (iy + 5)
	xor	a, l
	ld	l, a
	push	bc
	pop	iy
	ld	a, (iy + 3)
	xor	a, l
	ld	iy, (ix + 6)
	ld	(iy + 8), a
	ld	iy, (ix + -6)
	ld	a, (iy + 4)
	ld	iy, (ix + -3)
	xor	a, (iy + 3)
	ld	l, a
	ld	iy, (ix + -9)
	ld	a, (iy + 2)
	xor	a, l
	ld	l, a
	push	bc
	pop	iy
	ld	a, (iy + 5)
	xor	a, l
	ld	iy, (ix + 6)
	ld	(iy + 12), a
	ld	l, (iy + 1)
	ld	a, (iy + 5)
	ld	c, (iy + 9)
	ld	(ix + -9), c
	ld	c, (iy + 13)
	ld	(ix + -10), c
	ld	e, l
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _gf_mul
	add	iy, bc
	ld	(ix + -3), iy
	ld	l, (iy + 5)
	ld	(ix + -11), l
	ld	e, a
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _gf_mul
	add	iy, bc
	ld	(ix + -6), iy
	ld	a, (iy + 3)
	xor	a, (ix + -11)
	ld	(ix + -11), a
	ld	a, (ix + -9)
	ld	e, a
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _gf_mul
	add	iy, bc
	ld	(ix + -9), iy
	ld	a, (iy + 4)
	xor	a, (ix + -11)
	ld	(ix + -11), a
	ld	a, (ix + -10)
	ld	e, a
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _gf_mul
	push	hl
	pop	iy
	add	iy, bc
	ld	a, (iy + 2)
	lea	bc, iy + 0
	xor	a, (ix + -11)
	ld	iy, (ix + 6)
	ld	(iy + 1), a
	ld	iy, (ix + -6)
	ld	a, (iy + 5)
	ld	iy, (ix + -3)
	xor	a, (iy + 2)
	ld	l, a
	ld	iy, (ix + -9)
	ld	a, (iy + 3)
	xor	a, l
	ld	l, a
	push	bc
	pop	iy
	ld	a, (iy + 4)
	xor	a, l
	ld	iy, (ix + 6)
	ld	(iy + 5), a
	ld	iy, (ix + -6)
	ld	a, (iy + 2)
	ld	iy, (ix + -3)
	xor	a, (iy + 4)
	ld	l, a
	ld	iy, (ix + -9)
	ld	a, (iy + 5)
	xor	a, l
	ld	l, a
	push	bc
	pop	iy
	ld	a, (iy + 3)
	xor	a, l
	ld	iy, (ix + 6)
	ld	(iy + 9), a
	ld	iy, (ix + -6)
	ld	a, (iy + 4)
	ld	iy, (ix + -3)
	xor	a, (iy + 3)
	ld	l, a
	ld	iy, (ix + -9)
	ld	a, (iy + 2)
	xor	a, l
	ld	l, a
	push	bc
	pop	iy
	ld	a, (iy + 5)
	xor	a, l
	ld	iy, (ix + 6)
	ld	(iy + 13), a
	ld	l, (iy + 2)
	ld	a, (iy + 6)
	ld	c, (iy + 10)
	ld	(ix + -9), c
	ld	c, (iy + 14)
	ld	(ix + -10), c
	ld	e, l
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _gf_mul
	add	iy, bc
	ld	(ix + -3), iy
	ld	l, (iy + 5)
	ld	(ix + -11), l
	ld	e, a
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _gf_mul
	add	iy, bc
	ld	(ix + -6), iy
	ld	a, (iy + 3)
	xor	a, (ix + -11)
	ld	(ix + -11), a
	ld	a, (ix + -9)
	ld	e, a
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _gf_mul
	add	iy, bc
	ld	(ix + -9), iy
	ld	a, (iy + 4)
	xor	a, (ix + -11)
	ld	(ix + -11), a
	ld	a, (ix + -10)
	ld	e, a
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	ld	hl, _gf_mul
	push	hl
	pop	iy
	add	iy, bc
	ld	a, (iy + 2)
	lea	bc, iy + 0
	xor	a, (ix + -11)
	ld	iy, (ix + 6)
	ld	(iy + 2), a
	ld	iy, (ix + -6)
	ld	a, (iy + 5)
	ld	iy, (ix + -3)
	xor	a, (iy + 2)
	ld	l, a
	ld	iy, (ix + -9)
	ld	a, (iy + 3)
	xor	a, l
	ld	l, a
	push	bc
	pop	iy
	ld	a, (iy + 4)
	xor	a, l
	ld	iy, (ix + 6)
	ld	(iy + 6), a
	ld	iy, (ix + -6)
	ld	a, (iy + 2)
	ld	iy, (ix + -3)
	xor	a, (iy + 4)
	ld	l, a
	ld	iy, (ix + -9)
	ld	a, (iy + 5)
	xor	a, l
	ld	l, a
	push	bc
	pop	iy
	ld	a, (iy + 3)
	xor	a, l
	ld	iy, (ix + 6)
	ld	(iy + 10), a
	ld	iy, (ix + -6)
	ld	a, (iy + 4)
	ld	iy, (ix + -3)
	xor	a, (iy + 3)
	ld	l, a
	ld	iy, (ix + -9)
	ld	a, (iy + 2)
	xor	a, l
	ld	l, a
	push	bc
	pop	iy
	ld	a, (iy + 5)
	xor	a, l
	ld	iy, (ix + 6)
	ld	(iy + 14), a
	ld	l, (iy + 3)
	ld	a, (iy + 7)
	ld	c, (iy + 11)
	ld	(ix + -6), c
	ld	c, (iy + 15)
	ld	(ix + -10), c
	ld	e, l
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _gf_mul
	add	iy, bc
	ld	(ix + -9), iy
	ld	l, (iy + 5)
	ld	(ix + -11), l
	ld	e, a
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _gf_mul
	add	iy, bc
	ld	(ix + -3), iy
	ld	a, (iy + 3)
	xor	a, (ix + -11)
	ld	(ix + -11), a
	ld	a, (ix + -6)
	ld	e, a
	push	de
	pop	hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	bc
	ld	iy, _gf_mul
	add	iy, bc
	ld	(ix + -6), iy
	ld	a, (iy + 4)
	xor	a, (ix + -11)
	ld	(ix + -11), a
	ld	a, (ix + -10)
	ld	e, a
	ex	de, hl
	ld	bc, 6
	call	__imulu
	push	hl
	pop	de
	ld	iy, _gf_mul
	add	iy, de
	ld	a, (iy + 2)
	lea	de, iy + 0
	xor	a, (ix + -11)
	ld	iy, (ix + 6)
	ld	(iy + 3), a
	ld	iy, (ix + -3)
	ld	a, (iy + 5)
	ld	iy, (ix + -9)
	xor	a, (iy + 2)
	lea	bc, iy + 0
	ld	l, a
	ld	iy, (ix + -6)
	ld	a, (iy + 3)
	xor	a, l
	ld	l, a
	push	de
	pop	iy
	ld	a, (iy + 4)
	xor	a, l
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	(iy + 7), a
	ld	iy, (ix + -3)
	ld	a, (iy + 2)
	push	bc
	pop	iy
	xor	a, (iy + 4)
	ld	l, a
	ld	iy, (ix + -6)
	ld	a, (iy + 5)
	xor	a, l
	ld	l, a
	push	de
	pop	iy
	ld	a, (iy + 3)
	xor	a, l
	ld	iy, (ix + 6)
	ld	(iy + 11), a
	ld	iy, (ix + -3)
	ld	a, (iy + 4)
	push	bc
	pop	iy
	xor	a, (iy + 3)
	ld	l, a
	ld	iy, (ix + -6)
	ld	a, (iy + 2)
	xor	a, l
	ld	l, a
	push	de
	pop	iy
	ld	a, (iy + 5)
	xor	a, l
	ld	iy, (ix + 6)
	ld	(iy + 15), a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_aes_encrypt_block
_aes_encrypt_block:
	ld	hl, -22
	call	__frameset
	ld	iy, (ix + 6)
	lea	de, ix + -16
	ld	(ix + -19), de
	ld	hl, (ix + 12)
	ld	hl, (hl)
	ld	(ix + -22), hl
	ld	a, (iy)
	ld	(ix + -16), a
	ld	a, (iy + 1)
	ld	(ix + -12), a
	ld	a, (iy + 2)
	ld	(ix + -8), a
	ld	a, (iy + 3)
	ld	(ix + -4), a
	ld	a, (iy + 4)
	ld	(ix + -15), a
	ld	a, (iy + 5)
	ld	(ix + -11), a
	ld	a, (iy + 6)
	ld	(ix + -7), a
	ld	a, (iy + 7)
	ld	(ix + -3), a
	ld	a, (iy + 8)
	ld	(ix + -14), a
	ld	a, (iy + 9)
	ld	(ix + -10), a
	ld	a, (iy + 10)
	ld	(ix + -6), a
	ld	a, (iy + 11)
	ld	(ix + -2), a
	ld	a, (iy + 12)
	ld	(ix + -13), a
	ld	a, (iy + 13)
	ld	(ix + -9), a
	ld	a, (iy + 14)
	ld	(ix + -5), a
	ld	a, (iy + 15)
	ld	(ix + -1), a
	ld	iy, (ix + 12)
	pea	iy + 3
	push	de
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_SubBytes
	pop	hl
	ld	a, (ix + -12)
	ld	l, (ix + -11)
	ld	(ix + -12), l
	ld	l, (ix + -10)
	ld	(ix + -11), l
	ld	l, (ix + -9)
	ld	(ix + -10), l
	ld	(ix + -9), a
	ld	a, (ix + -8)
	ld	l, (ix + -6)
	ld	(ix + -8), l
	ld	(ix + -6), a
	ld	a, (ix + -7)
	ld	l, (ix + -5)
	ld	(ix + -7), l
	ld	(ix + -5), a
	ld	a, (ix + -4)
	ld	l, (ix + -1)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -2), l
	ld	(ix + -3), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_MixColumns
	pop	hl
	ld	iy, (ix + 12)
	pea	iy + 19
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_SubBytes
	pop	hl
	ld	a, (ix + -12)
	ld	l, (ix + -11)
	ld	(ix + -12), l
	ld	l, (ix + -10)
	ld	(ix + -11), l
	ld	l, (ix + -9)
	ld	(ix + -10), l
	ld	(ix + -9), a
	ld	a, (ix + -8)
	ld	l, (ix + -6)
	ld	(ix + -8), l
	ld	(ix + -6), a
	ld	a, (ix + -7)
	ld	l, (ix + -5)
	ld	(ix + -7), l
	ld	(ix + -5), a
	ld	a, (ix + -4)
	ld	l, (ix + -1)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -2), l
	ld	(ix + -3), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_MixColumns
	pop	hl
	ld	iy, (ix + 12)
	pea	iy + 35
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_SubBytes
	pop	hl
	ld	a, (ix + -12)
	ld	l, (ix + -11)
	ld	(ix + -12), l
	ld	l, (ix + -10)
	ld	(ix + -11), l
	ld	l, (ix + -9)
	ld	(ix + -10), l
	ld	(ix + -9), a
	ld	a, (ix + -8)
	ld	l, (ix + -6)
	ld	(ix + -8), l
	ld	(ix + -6), a
	ld	a, (ix + -7)
	ld	l, (ix + -5)
	ld	(ix + -7), l
	ld	(ix + -5), a
	ld	a, (ix + -4)
	ld	l, (ix + -1)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -2), l
	ld	(ix + -3), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_MixColumns
	pop	hl
	ld	iy, (ix + 12)
	pea	iy + 51
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_SubBytes
	pop	hl
	ld	a, (ix + -12)
	ld	l, (ix + -11)
	ld	(ix + -12), l
	ld	l, (ix + -10)
	ld	(ix + -11), l
	ld	l, (ix + -9)
	ld	(ix + -10), l
	ld	(ix + -9), a
	ld	a, (ix + -8)
	ld	l, (ix + -6)
	ld	(ix + -8), l
	ld	(ix + -6), a
	ld	a, (ix + -7)
	ld	l, (ix + -5)
	ld	(ix + -7), l
	ld	(ix + -5), a
	ld	a, (ix + -4)
	ld	l, (ix + -1)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -2), l
	ld	(ix + -3), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_MixColumns
	pop	hl
	ld	iy, (ix + 12)
	pea	iy + 67
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_SubBytes
	pop	hl
	ld	a, (ix + -12)
	ld	l, (ix + -11)
	ld	(ix + -12), l
	ld	l, (ix + -10)
	ld	(ix + -11), l
	ld	l, (ix + -9)
	ld	(ix + -10), l
	ld	(ix + -9), a
	ld	a, (ix + -8)
	ld	l, (ix + -6)
	ld	(ix + -8), l
	ld	(ix + -6), a
	ld	a, (ix + -7)
	ld	l, (ix + -5)
	ld	(ix + -7), l
	ld	(ix + -5), a
	ld	a, (ix + -4)
	ld	l, (ix + -1)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -2), l
	ld	(ix + -3), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_MixColumns
	pop	hl
	ld	iy, (ix + 12)
	pea	iy + 83
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_SubBytes
	pop	hl
	ld	a, (ix + -12)
	ld	l, (ix + -11)
	ld	(ix + -12), l
	ld	l, (ix + -10)
	ld	(ix + -11), l
	ld	l, (ix + -9)
	ld	(ix + -10), l
	ld	(ix + -9), a
	ld	a, (ix + -8)
	ld	l, (ix + -6)
	ld	(ix + -8), l
	ld	(ix + -6), a
	ld	a, (ix + -7)
	ld	l, (ix + -5)
	ld	(ix + -7), l
	ld	(ix + -5), a
	ld	a, (ix + -4)
	ld	l, (ix + -1)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -2), l
	ld	(ix + -3), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_MixColumns
	pop	hl
	ld	iy, (ix + 12)
	pea	iy + 99
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_SubBytes
	pop	hl
	ld	a, (ix + -12)
	ld	l, (ix + -11)
	ld	(ix + -12), l
	ld	l, (ix + -10)
	ld	(ix + -11), l
	ld	l, (ix + -9)
	ld	(ix + -10), l
	ld	(ix + -9), a
	ld	a, (ix + -8)
	ld	l, (ix + -6)
	ld	(ix + -8), l
	ld	(ix + -6), a
	ld	a, (ix + -7)
	ld	l, (ix + -5)
	ld	(ix + -7), l
	ld	(ix + -5), a
	ld	a, (ix + -4)
	ld	l, (ix + -1)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -2), l
	ld	(ix + -3), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_MixColumns
	pop	hl
	ld	iy, (ix + 12)
	pea	iy + 115
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_SubBytes
	pop	hl
	ld	a, (ix + -12)
	ld	l, (ix + -11)
	ld	(ix + -12), l
	ld	l, (ix + -10)
	ld	(ix + -11), l
	ld	l, (ix + -9)
	ld	(ix + -10), l
	ld	(ix + -9), a
	ld	a, (ix + -8)
	ld	l, (ix + -6)
	ld	(ix + -8), l
	ld	(ix + -6), a
	ld	a, (ix + -7)
	ld	l, (ix + -5)
	ld	(ix + -7), l
	ld	(ix + -5), a
	ld	a, (ix + -4)
	ld	l, (ix + -1)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -2), l
	ld	(ix + -3), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_MixColumns
	pop	hl
	ld	de, 131
	ld	iy, (ix + 12)
	add	iy, de
	push	iy
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_SubBytes
	pop	hl
	ld	a, (ix + -12)
	ld	l, (ix + -11)
	ld	(ix + -12), l
	ld	l, (ix + -10)
	ld	(ix + -11), l
	ld	l, (ix + -9)
	ld	(ix + -10), l
	ld	(ix + -9), a
	ld	a, (ix + -8)
	ld	l, (ix + -6)
	ld	(ix + -8), l
	ld	(ix + -6), a
	ld	a, (ix + -7)
	ld	l, (ix + -5)
	ld	(ix + -7), l
	ld	(ix + -5), a
	ld	a, (ix + -4)
	ld	l, (ix + -1)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -2), l
	ld	(ix + -3), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_MixColumns
	pop	hl
	ld	de, 147
	ld	iy, (ix + 12)
	add	iy, de
	push	iy
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_SubBytes
	pop	hl
	ld	a, (ix + -12)
	ld	l, (ix + -11)
	ld	(ix + -12), l
	ld	l, (ix + -10)
	ld	(ix + -11), l
	ld	l, (ix + -9)
	ld	(ix + -10), l
	ld	(ix + -9), a
	ld	a, (ix + -8)
	ld	l, (ix + -6)
	ld	(ix + -8), l
	ld	(ix + -6), a
	ld	a, (ix + -7)
	ld	l, (ix + -5)
	ld	(ix + -7), l
	ld	(ix + -5), a
	ld	a, (ix + -4)
	ld	l, (ix + -1)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -2), l
	ld	(ix + -3), a
	ld	de, 128
	ld	hl, (ix + -22)
	or	a, a
	sbc	hl, de
	jq	nz, BB16_2
	ld	de, 163
	jq	BB16_4
BB16_2:
	ld	hl, (ix + -19)
	push	hl
	call	_aes_MixColumns
	pop	hl
	ld	de, 163
	ld	hl, (ix + 12)
	push	hl
	pop	iy
	add	iy, de
	push	iy
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_SubBytes
	pop	hl
	ld	a, (ix + -12)
	ld	l, (ix + -11)
	ld	(ix + -12), l
	ld	l, (ix + -10)
	ld	(ix + -11), l
	ld	l, (ix + -9)
	ld	(ix + -10), l
	ld	(ix + -9), a
	ld	a, (ix + -8)
	ld	l, (ix + -6)
	ld	(ix + -8), l
	ld	(ix + -6), a
	ld	a, (ix + -7)
	ld	l, (ix + -5)
	ld	(ix + -7), l
	ld	(ix + -5), a
	ld	a, (ix + -4)
	ld	l, (ix + -1)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -2), l
	ld	(ix + -3), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_MixColumns
	pop	hl
	ld	de, 179
	ld	iy, (ix + 12)
	add	iy, de
	push	iy
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_SubBytes
	pop	hl
	ld	a, (ix + -12)
	ld	l, (ix + -11)
	ld	(ix + -12), l
	ld	l, (ix + -10)
	ld	(ix + -11), l
	ld	l, (ix + -9)
	ld	(ix + -10), l
	ld	(ix + -9), a
	ld	a, (ix + -8)
	ld	l, (ix + -6)
	ld	(ix + -8), l
	ld	(ix + -6), a
	ld	a, (ix + -7)
	ld	l, (ix + -5)
	ld	(ix + -7), l
	ld	(ix + -5), a
	ld	a, (ix + -4)
	ld	l, (ix + -1)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -2), l
	ld	(ix + -3), a
	ld	de, 192
	ld	hl, (ix + -22)
	or	a, a
	sbc	hl, de
	jq	nz, BB16_5
	ld	de, 195
BB16_4:
	ld	iy, (ix + 12)
	jq	BB16_6
BB16_5:
	ld	hl, (ix + -19)
	push	hl
	call	_aes_MixColumns
	pop	hl
	ld	de, 195
	ld	hl, (ix + 12)
	push	hl
	pop	iy
	add	iy, de
	push	iy
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_SubBytes
	pop	hl
	ld	a, (ix + -12)
	ld	l, (ix + -11)
	ld	(ix + -12), l
	ld	l, (ix + -10)
	ld	(ix + -11), l
	ld	l, (ix + -9)
	ld	(ix + -10), l
	ld	(ix + -9), a
	ld	a, (ix + -8)
	ld	l, (ix + -6)
	ld	(ix + -8), l
	ld	(ix + -6), a
	ld	a, (ix + -7)
	ld	l, (ix + -5)
	ld	(ix + -7), l
	ld	(ix + -5), a
	ld	a, (ix + -4)
	ld	l, (ix + -1)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -2), l
	ld	(ix + -3), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_MixColumns
	pop	hl
	ld	de, 211
	ld	iy, (ix + 12)
	add	iy, de
	push	iy
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_SubBytes
	ld	iy, (ix + 12)
	pop	hl
	ld	a, (ix + -12)
	ld	l, (ix + -11)
	ld	(ix + -12), l
	ld	l, (ix + -10)
	ld	(ix + -11), l
	ld	l, (ix + -9)
	ld	(ix + -10), l
	ld	(ix + -9), a
	ld	a, (ix + -8)
	ld	l, (ix + -6)
	ld	(ix + -8), l
	ld	(ix + -6), a
	ld	a, (ix + -7)
	ld	l, (ix + -5)
	ld	(ix + -7), l
	ld	(ix + -5), a
	ld	a, (ix + -4)
	ld	l, (ix + -1)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -2), l
	ld	(ix + -3), a
	ld	de, 227
BB16_6:
	add	iy, de
	push	iy
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	a, (ix + -16)
	ld	iy, (ix + 9)
	ld	(iy), a
	ld	a, (ix + -12)
	ld	(iy + 1), a
	ld	a, (ix + -8)
	ld	(iy + 2), a
	ld	a, (ix + -4)
	ld	(iy + 3), a
	ld	a, (ix + -15)
	ld	(iy + 4), a
	ld	a, (ix + -11)
	ld	(iy + 5), a
	ld	a, (ix + -7)
	ld	(iy + 6), a
	ld	a, (ix + -3)
	ld	(iy + 7), a
	ld	a, (ix + -14)
	ld	(iy + 8), a
	ld	a, (ix + -10)
	ld	(iy + 9), a
	ld	a, (ix + -6)
	ld	(iy + 10), a
	ld	a, (ix + -2)
	ld	(iy + 11), a
	ld	a, (ix + -13)
	ld	(iy + 12), a
	ld	a, (ix + -9)
	ld	(iy + 13), a
	ld	a, (ix + -5)
	ld	(iy + 14), a
	ld	a, (ix + -1)
	ld	(iy + 15), a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_aes_decrypt_block
_aes_decrypt_block:
	ld	hl, -19
	call	__frameset
	ld	iy, (ix + 6)
	ld	hl, (ix + 12)
	lea	de, ix + -16
	ld	(ix + -19), de
	ld	de, (hl)
	ld	a, (iy)
	ld	(ix + -16), a
	ld	a, (iy + 1)
	ld	(ix + -12), a
	ld	a, (iy + 2)
	ld	(ix + -8), a
	ld	a, (iy + 3)
	ld	(ix + -4), a
	ld	a, (iy + 4)
	ld	(ix + -15), a
	ld	a, (iy + 5)
	ld	(ix + -11), a
	ld	a, (iy + 6)
	ld	(ix + -7), a
	ld	a, (iy + 7)
	ld	(ix + -3), a
	ld	a, (iy + 8)
	ld	(ix + -14), a
	ld	a, (iy + 9)
	ld	(ix + -10), a
	ld	a, (iy + 10)
	ld	(ix + -6), a
	ld	a, (iy + 11)
	ld	(ix + -2), a
	ld	a, (iy + 12)
	ld	(ix + -13), a
	ld	a, (iy + 13)
	ld	(ix + -9), a
	ld	a, (iy + 14)
	ld	(ix + -5), a
	ld	a, (iy + 15)
	ld	(ix + -1), a
	ld	bc, 129
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB17_3
	ld	bc, (ix + -19)
	ld	iy, 193
	ex	de, hl
	lea	de, iy + 0
	or	a, a
	sbc	hl, de
	call	__setflag
	ld	hl, (ix + 12)
	jq	m, BB17_4
	ld	de, 227
	push	hl
	pop	iy
	add	iy, de
	push	iy
	push	bc
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	a, (ix + -9)
	ld	l, (ix + -10)
	ld	(ix + -9), l
	ld	l, (ix + -11)
	ld	(ix + -10), l
	ld	l, (ix + -12)
	ld	(ix + -11), l
	ld	(ix + -12), a
	ld	a, (ix + -5)
	ld	l, (ix + -7)
	ld	(ix + -5), l
	ld	(ix + -7), a
	ld	a, (ix + -6)
	ld	l, (ix + -8)
	ld	(ix + -6), l
	ld	(ix + -8), a
	ld	a, (ix + -1)
	ld	l, (ix + -4)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -3), l
	ld	(ix + -2), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvSubBytes
	pop	hl
	ld	de, 211
	ld	iy, (ix + 12)
	add	iy, de
	push	iy
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvMixColumns
	pop	hl
	ld	a, (ix + -9)
	ld	l, (ix + -10)
	ld	(ix + -9), l
	ld	l, (ix + -11)
	ld	(ix + -10), l
	ld	l, (ix + -12)
	ld	(ix + -11), l
	ld	(ix + -12), a
	ld	a, (ix + -5)
	ld	l, (ix + -7)
	ld	(ix + -5), l
	ld	(ix + -7), a
	ld	a, (ix + -6)
	ld	l, (ix + -8)
	ld	(ix + -6), l
	ld	(ix + -8), a
	ld	a, (ix + -1)
	ld	l, (ix + -4)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -3), l
	ld	(ix + -2), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvSubBytes
	pop	hl
	ld	de, 195
	ld	iy, (ix + 12)
	add	iy, de
	push	iy
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvMixColumns
	jq	BB17_5
BB17_3:
	ld	de, 163
	ld	iy, (ix + 12)
	add	iy, de
	push	iy
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	jq	BB17_7
BB17_4:
	ld	de, 195
	push	hl
	pop	iy
	add	iy, de
	push	iy
	push	bc
	call	_aes_AddRoundKey
	pop	hl
BB17_5:
	pop	hl
	ld	a, (ix + -9)
	ld	l, (ix + -10)
	ld	(ix + -9), l
	ld	l, (ix + -11)
	ld	(ix + -10), l
	ld	l, (ix + -12)
	ld	(ix + -11), l
	ld	(ix + -12), a
	ld	a, (ix + -5)
	ld	l, (ix + -7)
	ld	(ix + -5), l
	ld	(ix + -7), a
	ld	a, (ix + -6)
	ld	l, (ix + -8)
	ld	(ix + -6), l
	ld	(ix + -8), a
	ld	a, (ix + -1)
	ld	l, (ix + -4)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -3), l
	ld	(ix + -2), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvSubBytes
	pop	hl
	ld	de, 179
	ld	hl, (ix + 12)
	push	hl
	pop	iy
	add	iy, de
	push	iy
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvMixColumns
	pop	hl
	ld	a, (ix + -9)
	ld	l, (ix + -10)
	ld	(ix + -9), l
	ld	l, (ix + -11)
	ld	(ix + -10), l
	ld	l, (ix + -12)
	ld	(ix + -11), l
	ld	(ix + -12), a
	ld	a, (ix + -5)
	ld	l, (ix + -7)
	ld	(ix + -5), l
	ld	(ix + -7), a
	ld	a, (ix + -6)
	ld	l, (ix + -8)
	ld	(ix + -6), l
	ld	(ix + -8), a
	ld	a, (ix + -1)
	ld	l, (ix + -4)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -3), l
	ld	(ix + -2), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvSubBytes
	pop	hl
	ld	de, 163
	ld	iy, (ix + 12)
	add	iy, de
	push	iy
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvMixColumns
BB17_7:
	pop	hl
	ld	de, (ix + -19)
	ld	a, (ix + -9)
	ld	l, (ix + -10)
	ld	(ix + -9), l
	ld	l, (ix + -11)
	ld	(ix + -10), l
	ld	l, (ix + -12)
	ld	(ix + -11), l
	ld	(ix + -12), a
	ld	a, (ix + -5)
	ld	l, (ix + -7)
	ld	(ix + -5), l
	ld	(ix + -7), a
	ld	a, (ix + -6)
	ld	l, (ix + -8)
	ld	(ix + -6), l
	ld	(ix + -8), a
	ld	a, (ix + -1)
	ld	l, (ix + -4)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -3), l
	ld	(ix + -2), a
	push	de
	call	_aes_InvSubBytes
	pop	hl
	ld	de, 147
	ld	iy, (ix + 12)
	add	iy, de
	push	iy
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvMixColumns
	pop	hl
	ld	a, (ix + -9)
	ld	l, (ix + -10)
	ld	(ix + -9), l
	ld	l, (ix + -11)
	ld	(ix + -10), l
	ld	l, (ix + -12)
	ld	(ix + -11), l
	ld	(ix + -12), a
	ld	a, (ix + -5)
	ld	l, (ix + -7)
	ld	(ix + -5), l
	ld	(ix + -7), a
	ld	a, (ix + -6)
	ld	l, (ix + -8)
	ld	(ix + -6), l
	ld	(ix + -8), a
	ld	a, (ix + -1)
	ld	l, (ix + -4)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -3), l
	ld	(ix + -2), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvSubBytes
	pop	hl
	ld	de, 131
	ld	iy, (ix + 12)
	add	iy, de
	push	iy
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvMixColumns
	pop	hl
	ld	a, (ix + -9)
	ld	l, (ix + -10)
	ld	(ix + -9), l
	ld	l, (ix + -11)
	ld	(ix + -10), l
	ld	l, (ix + -12)
	ld	(ix + -11), l
	ld	(ix + -12), a
	ld	a, (ix + -5)
	ld	l, (ix + -7)
	ld	(ix + -5), l
	ld	(ix + -7), a
	ld	a, (ix + -6)
	ld	l, (ix + -8)
	ld	(ix + -6), l
	ld	(ix + -8), a
	ld	a, (ix + -1)
	ld	l, (ix + -4)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -3), l
	ld	(ix + -2), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvSubBytes
	pop	hl
	ld	iy, (ix + 12)
	pea	iy + 115
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvMixColumns
	pop	hl
	ld	a, (ix + -9)
	ld	l, (ix + -10)
	ld	(ix + -9), l
	ld	l, (ix + -11)
	ld	(ix + -10), l
	ld	l, (ix + -12)
	ld	(ix + -11), l
	ld	(ix + -12), a
	ld	a, (ix + -5)
	ld	l, (ix + -7)
	ld	(ix + -5), l
	ld	(ix + -7), a
	ld	a, (ix + -6)
	ld	l, (ix + -8)
	ld	(ix + -6), l
	ld	(ix + -8), a
	ld	a, (ix + -1)
	ld	l, (ix + -4)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -3), l
	ld	(ix + -2), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvSubBytes
	pop	hl
	ld	iy, (ix + 12)
	pea	iy + 99
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvMixColumns
	pop	hl
	ld	a, (ix + -9)
	ld	l, (ix + -10)
	ld	(ix + -9), l
	ld	l, (ix + -11)
	ld	(ix + -10), l
	ld	l, (ix + -12)
	ld	(ix + -11), l
	ld	(ix + -12), a
	ld	a, (ix + -5)
	ld	l, (ix + -7)
	ld	(ix + -5), l
	ld	(ix + -7), a
	ld	a, (ix + -6)
	ld	l, (ix + -8)
	ld	(ix + -6), l
	ld	(ix + -8), a
	ld	a, (ix + -1)
	ld	l, (ix + -4)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -3), l
	ld	(ix + -2), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvSubBytes
	pop	hl
	ld	iy, (ix + 12)
	pea	iy + 83
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvMixColumns
	pop	hl
	ld	a, (ix + -9)
	ld	l, (ix + -10)
	ld	(ix + -9), l
	ld	l, (ix + -11)
	ld	(ix + -10), l
	ld	l, (ix + -12)
	ld	(ix + -11), l
	ld	(ix + -12), a
	ld	a, (ix + -5)
	ld	l, (ix + -7)
	ld	(ix + -5), l
	ld	(ix + -7), a
	ld	a, (ix + -6)
	ld	l, (ix + -8)
	ld	(ix + -6), l
	ld	(ix + -8), a
	ld	a, (ix + -1)
	ld	l, (ix + -4)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -3), l
	ld	(ix + -2), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvSubBytes
	pop	hl
	ld	iy, (ix + 12)
	pea	iy + 67
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvMixColumns
	pop	hl
	ld	a, (ix + -9)
	ld	l, (ix + -10)
	ld	(ix + -9), l
	ld	l, (ix + -11)
	ld	(ix + -10), l
	ld	l, (ix + -12)
	ld	(ix + -11), l
	ld	(ix + -12), a
	ld	a, (ix + -5)
	ld	l, (ix + -7)
	ld	(ix + -5), l
	ld	(ix + -7), a
	ld	a, (ix + -6)
	ld	l, (ix + -8)
	ld	(ix + -6), l
	ld	(ix + -8), a
	ld	a, (ix + -1)
	ld	l, (ix + -4)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -3), l
	ld	(ix + -2), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvSubBytes
	pop	hl
	ld	iy, (ix + 12)
	pea	iy + 51
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvMixColumns
	pop	hl
	ld	a, (ix + -9)
	ld	l, (ix + -10)
	ld	(ix + -9), l
	ld	l, (ix + -11)
	ld	(ix + -10), l
	ld	l, (ix + -12)
	ld	(ix + -11), l
	ld	(ix + -12), a
	ld	a, (ix + -5)
	ld	l, (ix + -7)
	ld	(ix + -5), l
	ld	(ix + -7), a
	ld	a, (ix + -6)
	ld	l, (ix + -8)
	ld	(ix + -6), l
	ld	(ix + -8), a
	ld	a, (ix + -1)
	ld	l, (ix + -4)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -3), l
	ld	(ix + -2), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvSubBytes
	pop	hl
	ld	iy, (ix + 12)
	pea	iy + 35
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvMixColumns
	pop	hl
	ld	a, (ix + -9)
	ld	l, (ix + -10)
	ld	(ix + -9), l
	ld	l, (ix + -11)
	ld	(ix + -10), l
	ld	l, (ix + -12)
	ld	(ix + -11), l
	ld	(ix + -12), a
	ld	a, (ix + -5)
	ld	l, (ix + -7)
	ld	(ix + -5), l
	ld	(ix + -7), a
	ld	a, (ix + -6)
	ld	l, (ix + -8)
	ld	(ix + -6), l
	ld	(ix + -8), a
	ld	a, (ix + -1)
	ld	l, (ix + -4)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -3), l
	ld	(ix + -2), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvSubBytes
	pop	hl
	ld	iy, (ix + 12)
	pea	iy + 19
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvMixColumns
	pop	hl
	ld	a, (ix + -9)
	ld	l, (ix + -10)
	ld	(ix + -9), l
	ld	l, (ix + -11)
	ld	(ix + -10), l
	ld	l, (ix + -12)
	ld	(ix + -11), l
	ld	(ix + -12), a
	ld	a, (ix + -5)
	ld	l, (ix + -7)
	ld	(ix + -5), l
	ld	(ix + -7), a
	ld	a, (ix + -6)
	ld	l, (ix + -8)
	ld	(ix + -6), l
	ld	(ix + -8), a
	ld	a, (ix + -1)
	ld	l, (ix + -4)
	ld	(ix + -1), l
	ld	l, (ix + -3)
	ld	(ix + -4), l
	ld	l, (ix + -2)
	ld	(ix + -3), l
	ld	(ix + -2), a
	ld	hl, (ix + -19)
	push	hl
	call	_aes_InvSubBytes
	pop	hl
	ld	iy, (ix + 12)
	pea	iy + 3
	ld	hl, (ix + -19)
	push	hl
	call	_aes_AddRoundKey
	pop	hl
	pop	hl
	ld	a, (ix + -16)
	ld	iy, (ix + 9)
	ld	(iy), a
	ld	a, (ix + -12)
	ld	(iy + 1), a
	ld	a, (ix + -8)
	ld	(iy + 2), a
	ld	a, (ix + -4)
	ld	(iy + 3), a
	ld	a, (ix + -15)
	ld	(iy + 4), a
	ld	a, (ix + -11)
	ld	(iy + 5), a
	ld	a, (ix + -7)
	ld	(iy + 6), a
	ld	a, (ix + -3)
	ld	(iy + 7), a
	ld	a, (ix + -14)
	ld	(iy + 8), a
	ld	a, (ix + -10)
	ld	(iy + 9), a
	ld	a, (ix + -6)
	ld	(iy + 10), a
	ld	a, (ix + -2)
	ld	(iy + 11), a
	ld	a, (ix + -13)
	ld	(iy + 12), a
	ld	a, (ix + -9)
	ld	(iy + 13), a
	ld	a, (ix + -5)
	ld	(iy + 14), a
	ld	a, (ix + -1)
	ld	(iy + 15), a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_increment_iv
_increment_iv:
	ld	hl, -9
	call	__frameset
	ld	de, (ix + 9)
	ld	hl, 16
	ld	iy, 1
	ld	bc, 0
	or	a, a
	sbc	hl, de
	ld	(ix + -3), hl
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	ld	(ix + -6), hl
	ld	iy, (ix + 6)
	lea	hl, iy + 15
	ld	(ix + -9), hl
BB18_1:
	push	bc
	pop	hl
	ld	de, 15
	add	hl, de
	ld	de, (ix + -3)
	or	a, a
	sbc	hl, de
	jq	c, BB18_4
	ld	iy, (ix + -9)
	add	iy, bc
	inc	(iy)
	ld	hl, (ix + -6)
	or	a, a
	sbc	hl, bc
	jq	z, BB18_4
	ld	a, (iy)
	dec	bc
	or	a, a
	jq	z, BB18_1
BB18_4:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_AESEncrypt
_hashlib_AESEncrypt:
	ld	hl, -98
	call	__frameset
	ld	bc, (ix + 6)
	ld	e, 0
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB19_23
	ld	iy, (ix + 12)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB19_23
	ld	hl, (ix + 15)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB19_23
	ld	hl, (ix + 9)
	ld	d, (ix + 21)
	ld	a, d
	or	a, a
	jq	nz, BB19_11
	ld	a, l
	and	a, 15
	or	a, a
	jq	nz, BB19_23
	ld	(ix + -83), iy
	lea	de, ix + -16
	ld	(ix + -86), de
	lea	de, ix + -32
	ld	(ix + -89), de
	lea	de, ix + -48
	ld	c, 4
	call	__ishru
	ld	(ix + -92), hl
	ld	hl, 16
	push	hl
	ld	hl, (ix + 18)
	push	hl
	ld	(ix + -95), de
	push	de
	call	_memcpy
	ld	de, (ix + -92)
	ld	iy, (ix + 6)
	pop	hl
	pop	hl
	pop	hl
BB19_9:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB19_22
	ld	hl, 16
	push	hl
	push	iy
	ld	hl, (ix + -86)
	push	hl
	ld	(ix + -98), iy
	ld	(ix + -92), de
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 16
	push	hl
	ld	hl, (ix + -86)
	push	hl
	ld	hl, (ix + -95)
	push	hl
	call	_xor_buf
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 15)
	push	hl
	ld	hl, (ix + -89)
	push	hl
	ld	hl, (ix + -86)
	push	hl
	call	_aes_encrypt_block
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 16
	push	hl
	ld	hl, (ix + -89)
	push	hl
	ld	hl, (ix + -83)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 16
	push	hl
	ld	hl, (ix + -89)
	push	hl
	ld	hl, (ix + -95)
	push	hl
	call	_memcpy
	ld	de, (ix + -92)
	ld	iy, (ix + -98)
	pop	hl
	pop	hl
	pop	hl
	dec	de
	lea	iy, iy + 16
	lea	hl, iy + 0
	ld	iy, (ix + -83)
	lea	iy, iy + 16
	ld	(ix + -83), iy
	push	hl
	pop	iy
	jq	BB19_9
BB19_11:
	ld	a, d
	cp	a, 1
	jq	nz, BB19_23
	lea	hl, ix + -64
	ld	(ix + -83), hl
	push	bc
	pop	hl
	lea	de, iy + 0
	or	a, a
	sbc	hl, de
	jq	z, BB19_14
	ld	hl, (ix + 9)
	push	hl
	push	bc
	ld	hl, (ix + 12)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
BB19_14:
	lea	hl, ix + -80
	ld	(ix + -86), hl
	ld	hl, 16
	push	hl
	ld	hl, (ix + 18)
	push	hl
	ld	hl, (ix + -83)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 9)
	push	hl
	pop	iy
	ld	de, -16
	add	iy, de
	ld	de, 17
	or	a, a
	sbc	hl, de
	jq	c, BB19_19
	lea	de, iy + 0
	ld	iy, 0
BB19_16:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	ld	hl, (ix + 15)
	jq	nc, BB19_20
	push	hl
	ld	hl, (ix + -86)
	push	hl
	ld	hl, (ix + -83)
	push	hl
	ld	(ix + -89), iy
	ld	(ix + -92), de
	call	_aes_encrypt_block
	pop	hl
	pop	hl
	pop	hl
	ld	de, (ix + -89)
	ld	hl, (ix + 12)
	add	hl, de
	ld	de, 16
	push	de
	push	hl
	ld	hl, (ix + -86)
	push	hl
	call	_xor_buf
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 16
	push	hl
	ld	hl, (ix + -83)
	push	hl
	call	_increment_iv
	ld	de, (ix + -92)
	ld	iy, (ix + -89)
	pop	hl
	pop	hl
	ld	bc, 16
	add	iy, bc
	jq	BB19_16
BB19_19:
	or	a, a
	sbc	hl, hl
	ld	(ix + -89), hl
	ld	hl, (ix + 15)
	jq	BB19_21
BB19_20:
	ld	(ix + -89), iy
BB19_21:
	push	hl
	ld	hl, (ix + -86)
	push	hl
	ld	hl, (ix + -83)
	push	hl
	call	_aes_encrypt_block
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 12)
	push	hl
	pop	iy
	ld	de, (ix + -89)
	add	iy, de
	ld	hl, (ix + 9)
	or	a, a
	sbc	hl, de
	push	hl
	push	iy
	ld	hl, (ix + -86)
	push	hl
	call	_xor_buf
	pop	hl
	pop	hl
	pop	hl
BB19_22:
	ld	e, 1
BB19_23:
	ld	a, e
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_AESDecrypt
_hashlib_AESDecrypt:
	ld	hl, -66
	call	__frameset
	ld	hl, (ix + 6)
	ld	e, 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB20_14
	ld	bc, (ix + 12)
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB20_14
	ld	hl, (ix + 15)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB20_14
	ld	(ix + -51), bc
	ld	hl, (ix + 9)
	ld	iy, (ix + 18)
	ld	c, (ix + 21)
	ld	a, c
	or	a, a
	jq	nz, BB20_11
	ld	a, l
	and	a, 15
	or	a, a
	jq	nz, BB20_14
	lea	bc, ix + -16
	ld	(ix + -54), bc
	lea	bc, ix + -32
	ld	(ix + -57), bc
	lea	de, ix + -48
	ld	c, 4
	call	__ishru
	ld	(ix + -60), hl
	ld	hl, 16
	push	hl
	push	iy
	ld	(ix + -63), de
	push	de
	call	_memcpy
	ld	de, (ix + -60)
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
BB20_9:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB20_13
	ld	hl, 16
	push	hl
	push	iy
	ld	hl, (ix + -54)
	push	hl
	ld	(ix + -66), iy
	ld	(ix + -60), de
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 15)
	push	hl
	ld	hl, (ix + -57)
	push	hl
	ld	hl, (ix + -54)
	push	hl
	call	_aes_decrypt_block
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 16
	push	hl
	ld	hl, (ix + -57)
	push	hl
	ld	hl, (ix + -63)
	push	hl
	call	_xor_buf
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 16
	push	hl
	ld	hl, (ix + -57)
	push	hl
	ld	hl, (ix + -51)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 16
	push	hl
	ld	hl, (ix + -54)
	push	hl
	ld	hl, (ix + -63)
	push	hl
	call	_memcpy
	ld	de, (ix + -60)
	ld	iy, (ix + -66)
	pop	hl
	pop	hl
	pop	hl
	dec	de
	lea	iy, iy + 16
	lea	hl, iy + 0
	ld	iy, (ix + -51)
	lea	iy, iy + 16
	ld	(ix + -51), iy
	push	hl
	pop	iy
	jq	BB20_9
BB20_11:
	ld	a, c
	cp	a, 1
	jq	nz, BB20_14
	ld	de, 1
	push	de
	push	iy
	ld	de, (ix + 15)
	push	de
	ld	de, (ix + 12)
	push	de
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_hashlib_AESEncrypt
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB20_13:
	ld	e, 1
BB20_14:
	ld	a, e
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_AESOutputMAC
_hashlib_AESOutputMAC:
	ld	hl, -63
	call	__frameset
	ld	de, (ix + 9)
	ld	bc, 0
	ld	a, e
	and	a, 15
	or	a, a
	jq	nz, BB21_9
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB21_10
	ld	hl, (ix + 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB21_11
	ld	hl, (ix + 15)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB21_8
	lea	hl, ix + -16
	ld	(ix + -54), hl
	lea	hl, ix + -32
	ld	(ix + -51), hl
	lea	iy, ix + -48
	ld	c, 4
	ex	de, hl
	call	__ishru
	ld	(ix + -57), hl
	ld	hl, 16
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	(ix + -60), iy
	push	iy
	call	_memset
	ld	de, (ix + -57)
	ld	iy, (ix + 6)
	pop	hl
	pop	hl
	pop	hl
BB21_5:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB21_7
	ld	hl, 16
	push	hl
	push	iy
	ld	hl, (ix + -54)
	push	hl
	ld	(ix + -63), iy
	ld	(ix + -57), de
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 16
	push	hl
	ld	hl, (ix + -54)
	push	hl
	ld	hl, (ix + -60)
	push	hl
	call	_xor_buf
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 15)
	push	hl
	ld	hl, (ix + -51)
	push	hl
	ld	hl, (ix + -54)
	push	hl
	call	_aes_encrypt_block
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 16
	push	hl
	ld	hl, (ix + -51)
	push	hl
	ld	hl, (ix + -60)
	push	hl
	call	_memcpy
	ld	de, (ix + -57)
	ld	iy, (ix + -63)
	pop	hl
	pop	hl
	pop	hl
	dec	de
	lea	iy, iy + 16
	jq	BB21_5
BB21_9:
	jq	BB21_8
BB21_10:
	jq	BB21_8
BB21_11:
	jq	BB21_8
BB21_7:
	ld	hl, 16
	push	hl
	ld	hl, (ix + -51)
	push	hl
	ld	hl, (ix + 12)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	bc, 1
BB21_8:
	push	bc
	pop	hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_AESPadMessage
_hashlib_AESPadMessage:
	ld	hl, -6
	call	__frameset
	ld	bc, (ix + 9)
	ld	de, 0
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB22_1
	jq	BB22_10
BB22_1:
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB22_2
	jq	BB22_10
BB22_2:
	ld	hl, (ix + 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB22_3
	jq	BB22_10
BB22_3:
	push	bc
	pop	hl
	ld	bc, 16
	ld	iy, -16
	ld	a, l
	and	a, 15
	add	hl, bc
	ld	(ix + -3), hl
	lea	bc, iy + 0
	call	__iand
	or	a, a
	jq	z, BB22_5
	ld	(ix + -3), hl
BB22_5:
	ld	l, (ix + 15)
	ld	a, l
	or	a, a
	ld	iy, (ix + 12)
	jq	nz, BB22_6
	ld	hl, (ix + 9)
	ex	de, hl
	add	iy, de
	ld	hl, (ix + -3)
	or	a, a
	sbc	hl, de
	push	hl
	push	hl
	push	iy
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	jq	BB22_9
BB22_6:
	ld	a, l
	cp	a, 1
	ld	bc, (ix + 9)
	jq	nz, BB22_10
	add	iy, bc
	ld	(ix + -6), iy
	ld	hl, (ix + -3)
	or	a, a
	sbc	hl, bc
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	push	iy
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -6)
	set	7, (hl)
BB22_9:
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	ld	hl, (ix + 12)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	de, (ix + -3)
BB22_10:
	ex	de, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_RSAPadMessage
_hashlib_RSAPadMessage:
	ld	hl, -274
	call	__frameset
	ld	iy, (ix + 9)
	ld	bc, (ix + 15)
	ld	de, 16
	lea	hl, iy + 0
	add	hl, de
	ex	de, hl
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	c, BB23_1
	ld	de, 257
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	nc, BB23_1
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB23_1
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB23_1
	ld	de, (ix + 12)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB23_10
BB23_1:
	or	a, a
	sbc	hl, hl
BB23_17:
	ld	sp, ix
	pop	ix
	ret
BB23_10:
	ld	bc, -16
	lea	hl, ix + -22
	ld	(ix + -3), de
	ld	de, -271
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	de, -262
	lea	hl, ix + 0
	add	hl, de
	push	ix
	ld	de, -265
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	hl, (ix + 15)
	add	hl, bc
	push	ix
	ld	bc, -268
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	de, (ix + -3)
	push	de
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 16
	push	hl
	ld	bc, -271
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_hashlib_RandomBytes
	pop	hl
	pop	hl
	ld	bc, -268
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -265
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, 16
	push	hl
	ld	bc, -271
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_hashlib_MGF1Hash
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 15)
	ld	de, -16
	add	iy, de
	ld	de, 0
BB23_11:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	ld	hl, (ix + 6)
	jq	z, BB23_13
	add	hl, de
	lea	bc, iy + 0
	ld	(ix + -3), bc
	ld	bc, -265
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	add	iy, de
	ld	a, (iy)
	ld	bc, (ix + -3)
	push	bc
	pop	iy
	xor	a, (hl)
	ld	hl, (ix + 12)
	add	hl, de
	ld	(hl), a
	inc	de
	jq	BB23_11
BB23_13:
	ld	hl, 16
	push	hl
	ld	bc, -265
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -268
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, (ix + 12)
	ld	bc, -274
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	push	hl
	call	_hashlib_MGF1Hash
	or	a, a
	sbc	hl, hl
	push	ix
	ld	bc, -268
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 15)
	lea	hl, iy + 0
	ld	de, -16
	add	hl, de
	ex	de, hl
	ld	bc, -274
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, de
	push	ix
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	de, 16
BB23_14:
	ld	bc, -268
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	de
	pop	bc
	or	a, a
	sbc	hl, de
	jq	z, BB23_16
	ld	de, -271
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	ld	(ix + -3), bc
	push	ix
	ld	bc, -268
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	add	iy, de
	push	ix
	ld	bc, -265
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	add	hl, de
	ld	a, (hl)
	xor	a, (iy)
	ld	iy, (ix + 15)
	ld	bc, -274
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, de
	ld	(hl), a
	inc	de
	ld	bc, -268
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), de
	ld	bc, (ix + -3)
	push	bc
	pop	de
	jq	BB23_14
BB23_16:
	lea	hl, iy + 0
	jq	BB23_17
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_MGF1Hash
_hashlib_MGF1Hash:
	ld	hl, -539
	call	__frameset
	ld	bc, -298
	lea	iy, ix + 0
	add	iy, bc
	ld	bc, -514
	lea	hl, ix + 0
	add	hl, bc
	push	hl
	pop	de
	lea	hl, iy + 4
	lea	bc, iy + 0
	ld	(ix + -3), bc
	ld	bc, -526
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	push	de
	pop	iy
	lea	de, iy + 108
	ld	bc, -529
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), de
	lea	hl, iy + 0
	ld	bc, -520
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	bc, (ix + -3)
	push	bc
	pop	iy
	ld	bc, -523
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	pea	iy + 36
	push	de
	call	_hashlib_Sha256Init
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	ld	bc, -529
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_hashlib_Sha256Update
	ld	de, (ix + 15)
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	push	de
	pop	iy
	xor	a, a
	or	a, a
	sbc	hl, hl
	push	ix
	ld	bc, -517
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	bc, 0
BB24_1:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	nc, BB24_2
	ld	de, -532
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	lea	hl, iy + 0
	ld	de, 32
	or	a, a
	sbc	hl, de
	ld	bc, -536
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	(hl), iy
	ld	hl, 32
	jq	c, BB24_5
	push	hl
	pop	iy
BB24_5:
	ld	bc, -539
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	ld	bc, -517
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	de
	pop	bc
	ld	(ix + -3), de
	push	ix
	ld	de, -533
	add	ix, de
	ld	(ix + 0), a
	pop	ix
	ld	l, 24
	call	__lshru
	ld	a, c
	push	ix
	ld	bc, -523
	add	ix, bc
	ld	iy, (ix + 0)
	pop	ix
	ld	(iy + 0), a
	ld	de, (ix + -3)
	push	de
	pop	bc
	ld	(ix + -3), de
	push	ix
	ld	de, -533
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	ld	l, 16
	call	__lshru
	ld	a, c
	ld	(iy + 1), a
	ld	de, (ix + -3)
	push	ix
	ld	bc, -517
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ld	a, d
	ld	(iy + 2), a
	ld	a, e
	ld	(iy + 3), a
	ld	hl, 108
	push	hl
	ld	bc, -529
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -520
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 4
	push	hl
	ld	bc, -523
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -520
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_hashlib_Sha256Update
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -526
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -520
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_hashlib_Sha256Final
	pop	hl
	pop	hl
	ld	bc, -532
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	ld	hl, (ix + 12)
	add	hl, de
	ld	bc, -539
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	de
	push	ix
	ld	bc, -526
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	push	de
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	de, 32
	ld	bc, -532
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	add	iy, de
	push	ix
	ld	bc, -517
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	push	ix
	ld	bc, -533
	add	ix, bc
	ld	e, (ix + 0)
	pop	ix
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	(ix + -3), de
	push	ix
	ld	de, -517
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	lea	bc, iy + 0
	ld	de, (ix + -3)
	ld	a, e
	ld	de, -32
	ld	(ix + -3), bc
	ld	bc, -536
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	add	iy, de
	ld	de, (ix + 15)
	ld	bc, (ix + -3)
	jq	BB24_1
BB24_2:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_AESStripPadding
_hashlib_AESStripPadding:
	ld	hl, -3
	call	__frameset
	ld	bc, (ix + 9)
	ld	de, 0
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB25_1
	jq	BB25_10
BB25_1:
	ld	iy, (ix + 6)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB25_2
	jq	BB25_10
BB25_2:
	ld	hl, (ix + 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB25_3
	jq	BB25_10
BB25_3:
	ld	l, (ix + 15)
	ld	a, l
	or	a, a
	jq	nz, BB25_4
	push	bc
	pop	de
	dec	de
	lea	hl, iy + 0
	add	hl, de
	ld	a, (hl)
	ld	de, 0
	ld	e, a
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	jq	BB25_9
BB25_4:
	ld	a, l
	cp	a, 1
	jq	nz, BB25_10
	lea	hl, iy + 0
	dec	hl
	ld	(ix + -3), hl
BB25_7:
	ld	hl, (ix + -3)
	add	hl, bc
	dec	bc
	ld	a, (hl)
	cp	a, -128
	jq	nz, BB25_7
	inc	bc
BB25_9:
	ld	(ix + -3), bc
	push	bc
	push	iy
	ld	hl, (ix + 12)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	de, (ix + -3)
	ld	iy, (ix + 12)
	add	iy, de
	ld	hl, (ix + 9)
	ld	de, (ix + -3)
	or	a, a
	sbc	hl, de
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	push	iy
	call	_memset
	ld	de, (ix + -3)
	pop	hl
	pop	hl
	pop	hl
BB25_10:
	ex	de, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_RSAStripPadding
_hashlib_RSAStripPadding:
	ld	hl, -274
	call	__frameset
	ld	de, (ix + 9)
	ld	bc, 0
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB26_2
	push	bc
	pop	hl
	jq	BB26_15
BB26_2:
	ld	iy, (ix + 6)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB26_3
	ld	hl, (ix + 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB26_6
BB26_3:
	or	a, a
	sbc	hl, hl
	jq	BB26_15
BB26_6:
	lea	hl, ix + -22
	push	ix
	ld	bc, -271
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	bc, -262
	lea	hl, ix + 0
	add	hl, bc
	push	ix
	ld	bc, -265
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	push	de
	pop	hl
	ld	bc, -16
	add	hl, bc
	push	ix
	ld	bc, -268
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ex	de, hl
	ld	de, -17
	add	hl, de
	ex	de, hl
	add	iy, de
	ld	de, 16
	push	de
	push	iy
	ld	bc, -271
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 16
	push	hl
	ld	bc, -265
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -268
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, (ix + 6)
	ld	bc, -274
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	hl, (ix + 6)
	push	hl
	call	_hashlib_MGF1Hash
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, 16
	ld	bc, 0
BB26_7:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	z, BB26_9
	ld	(ix + -3), de
	ld	de, -265
	lea	hl, ix + 0
	add	hl, de
	ld	iy, (hl)
	add	iy, bc
	push	ix
	ld	de, -271
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	add	hl, bc
	ld	a, (hl)
	xor	a, (iy)
	ld	(hl), a
	inc	bc
	ld	de, (ix + -3)
	jq	BB26_7
BB26_9:
	ld	bc, -268
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -265
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, 16
	push	hl
	ld	bc, -271
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_hashlib_MGF1Hash
	ld	de, -268
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	pop	de
	pop	de
	pop	de
	pop	de
	ld	iy, (ix + 12)
	lea	de, iy + 0
BB26_10:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB26_12
	ld	(ix + -3), bc
	ld	bc, -265
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	a, (hl)
	ld	bc, -274
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	xor	a, (iy)
	ex	de, hl
	ld	(hl), a
	ld	bc, (ix + -3)
	dec	bc
	inc	iy
	push	ix
	ld	de, -274
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	ld	(ix + -3), bc
	ld	bc, -265
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	inc	de
	push	ix
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	inc	hl
	ex	de, hl
	ld	bc, (ix + -3)
	jq	BB26_10
BB26_12:
	ld	iy, (ix + 12)
	lea	iy, iy + -17
	ld	de, (ix + 9)
BB26_13:
	lea	hl, iy + 0
	add	hl, de
	ld	a, (hl)
	ex	de, hl
	dec	hl
	or	a, a
	push	hl
	pop	de
	jq	nz, BB26_13
	ld	de, -15
	add	hl, de
BB26_15:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_AESVerifyMAC
_hashlib_AESVerifyMAC:
	ld	hl, -22
	call	__frameset
	ld	iy, (ix + 6)
	ld	hl, (ix + 9)
	ld	bc, -16
	lea	de, ix + -16
	ld	(ix + -19), de
	add	hl, bc
	ld	(ix + -22), hl
	ld	bc, (ix + 12)
	push	bc
	push	de
	push	hl
	push	iy
	call	_hashlib_AESOutputMAC
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	ld	de, (ix + -22)
	add	hl, de
	ld	de, 16
	push	de
	push	hl
	ld	hl, (ix + -19)
	push	hl
	call	_hashlib_CompareDigest
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_hashlib_CompareDigest
_hashlib_CompareDigest:
	ld	hl, -6
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix + -3), hl
	ld	iy, (ix + 9)
	ld	hl, (ix + 12)
	ld	e, 0
	ld	d, 1
BB28_1:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB28_2
	ld	(ix + -6), iy
	ld	a, (iy)
	ld	iy, (ix + -3)
	xor	a, (iy)
	ld	c, a
	ld	a, e
	and	a, 1
	ld	e, a
	ld	a, c
	or	a, e
	or	a, a
	ld	e, d
	jq	nz, BB28_5
	ld	e, 0
BB28_5:
	dec	hl
	ld	bc, (ix + -3)
	inc	bc
	ld	(ix + -3), bc
	ld	iy, (ix + -6)
	inc	iy
	jq	BB28_1
BB28_2:
	ld	a, e
	ld	l, 1
	xor	a, l
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	public	_csprng_state
_csprng_state:
	rb	131

	section	.bss,"aw",@nobits
	public	_prng_init
_prng_init:
	rb	1

	section	.data,"aw",@progbits
	public	_Base64Code
_Base64Code:
	db	"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",000o

	section	.rodata,"a",@progbits
	private	_index_64
_index_64:
	db	"",377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,377o,000o,001o,"6789:;<=>?",377o,377o,377o,377o,377o,377o,377o,002o,003o,004o,005o,006o,007o,010o,011o,012o,013o,014o,015o,016o,017o,020o,021o,022o,023o,024o,025o,026o,027o,030o,031o,032o,033o,377o,377o,377o,377o,377o,377o,034o,035o,036o,037o," !""#$%&'()*+,-./012345",377o,377o,377o,377o,377o

	section	.rodata,"a",@progbits
	private	_aes_sbox
_aes_sbox:
	db	"c|w{",362o,"ko",305o,"0",001o,"g+",376o,327o,253o,"v"
	db	"",312o,202o,311o,"}",372o,"YG",360o,255o,324o,242o,257o,234o,244o,"r",300o
	db	"",267o,375o,223o,"&6?",367o,314o,"4",245o,345o,361o,"q",330o,"1",025o
	db	"",004o,307o,"#",303o,030o,226o,005o,232o,007o,022o,200o,342o,353o,"'",262o,"u"
	db	"",011o,203o,",",032o,033o,"nZ",240o,"R;",326o,263o,")",343o,"/",204o
	db	"S",321o,000o,355o," ",374o,261o,"[j",313o,276o,"9JLX",317o
	db	"",320o,357o,252o,373o,"CM3",205o,"E",371o,002o,177o,"P<",237o,250o
	db	"Q",243o,"@",217o,222o,235o,"8",365o,274o,266o,332o,"!",020o,377o,363o,322o
	db	"",315o,014o,023o,354o,"_",227o,"D",027o,304o,247o,"~=d]",031o,"s"
	db	"`",201o,"O",334o,"""*",220o,210o,"F",356o,270o,024o,336o,"^",013o,333o
	db	"",340o,"2:",012o,"I",006o,"$\",302o,323o,254o,"b",221o,225o,344o,"y"
	db	"",347o,310o,"7m",215o,325o,"N",251o,"lV",364o,352o,"ez",256o,010o
	db	"",272o,"x%.",034o,246o,264o,306o,350o,335o,"t",037o,"K",275o,213o,212o
	db	"p>",265o,"fH",003o,366o,016o,"a5W",271o,206o,301o,035o,236o
	db	"",341o,370o,230o,021o,"i",331o,216o,224o,233o,036o,207o,351o,316o,"U(",337o
	db	"",214o,241o,211o,015o,277o,346o,"BhA",231o,"-",017o,260o,"T",273o,026o

	section	.rodata,"a",@progbits
	private	L___const.hashlib_AESLoadKey.Rcon
L___const.hashlib_AESLoadKey.Rcon:
	dd	16777216
	dd	33554432
	dd	67108864
	dd	134217728
	dd	268435456
	dd	536870912
	dd	1073741824
	dd	2147483648
	dd	452984832
	dd	905969664
	dd	1811939328
	dd	3623878656
	dd	2868903936
	dd	1291845632
	dd	2583691264

	section	.rodata,"a",@progbits
	private	_aes_invsbox
_aes_invsbox:
	db	"R",011o,"j",325o,"06",245o,"8",277o,"@",243o,236o,201o,363o,327o,373o
	db	"|",343o,"9",202o,233o,"/",377o,207o,"4",216o,"CD",304o,336o,351o,313o
	db	"T{",224o,"2",246o,302o,"#=",356o,"L",225o,013o,"B",372o,303o,"N"
	db	"",010o,".",241o,"f(",331o,"$",262o,"v[",242o,"Im",213o,321o,"%"
	db	"r",370o,366o,"d",206o,"h",230o,026o,324o,244o,"\",314o,"]e",266o,222o
	db	"lpHP",375o,355o,271o,332o,"^",025o,"FW",247o,215o,235o,204o
	db	"",220o,330o,253o,000o,214o,274o,323o,012o,367o,344o,"X",005o,270o,263o,"E",006o
	db	"",320o,",",036o,217o,312o,"?",017o,002o,301o,257o,275o,003o,001o,023o,212o,"k"
	db	":",221o,021o,"AOg",334o,352o,227o,362o,317o,316o,360o,264o,346o,"s"
	db	"",226o,254o,"t""",347o,255o,"5",205o,342o,371o,"7",350o,034o,"u",337o,"n"
	db	"G",361o,032o,"q",035o,")",305o,211o,"o",267o,"b",016o,252o,030o,276o,033o
	db	"",374o,"V>K",306o,322o,"y ",232o,333o,300o,376o,"x",315o,"Z",364o
	db	"",037o,335o,250o,"3",210o,007o,307o,"1",261o,022o,020o,"Y'",200o,354o,"_"
	db	"`Q",177o,251o,031o,265o,"J",015o,"-",345o,"z",237o,223o,311o,234o,357o
	db	"",240o,340o,";M",256o,"*",365o,260o,310o,353o,273o,"<",203o,"S",231o,"a"
	db	"",027o,"+",004o,"~",272o,"w",326o,"&",341o,"i",024o,"cU!",014o,"}"

	section	.rodata,"a",@progbits
	private	_gf_mul
_gf_mul:
	db	6 dup 0
	db	"",002o,003o,011o,013o,015o,016o
	db	"",004o,006o,022o,026o,032o,034o
	db	"",006o,005o,033o,035o,027o,022o
	db	"",010o,014o,"$,48"
	db	"",012o,017o,"-'96"
	db	"",014o,012o,"6:.$"
	db	"",016o,011o,"?1#*"
	db	"",020o,030o,"HXhp"
	db	"",022o,033o,"ASe~"
	db	"",024o,036o,"ZNrl"
	db	"",026o,035o,"SE",177o,"b"
	db	"",030o,024o,"lt\H"
	db	"",032o,027o,"e",177o,"QF"
	db	"",034o,022o,"~bFT"
	db	"",036o,021o,"wiKZ"
	db	" 0",220o,260o,320o,340o
	db	"""3",231o,273o,335o,356o
	db	"$6",202o,246o,312o,374o
	db	"&5",213o,255o,307o,362o
	db	"(<",264o,234o,344o,330o
	db	"*?",275o,227o,351o,326o
	db	",:",246o,212o,376o,304o
	db	".9",257o,201o,363o,312o
	db	"0(",330o,350o,270o,220o
	db	"2+",321o,343o,265o,236o
	db	"4.",312o,376o,242o,214o
	db	"6-",303o,365o,257o,202o
	db	"8$",374o,304o,214o,250o
	db	":'",365o,317o,201o,246o
	db	"<""",356o,322o,226o,264o
	db	">!",347o,331o,233o,272o
	db	"@`;{",273o,333o
	db	"Bc2p",266o,325o
	db	"Df)m",241o,307o
	db	"Fe f",254o,311o
	db	"Hl",037o,"W",217o,343o
	db	"Jo",026o,"\",202o,355o
	db	"Lj",015o,"A",225o,377o
	db	"Ni",004o,"J",230o,361o
	db	"Pxs#",323o,253o
	db	"R{z(",336o,245o
	db	"T~a5",311o,267o
	db	"V}h>",304o,271o
	db	"XtW",017o,347o,223o
	db	"Zw^",004o,352o,235o
	db	"\rE",031o,375o,217o
	db	"^qL",022o,360o,201o
	db	"`P",253o,313o,"k;"
	db	"bS",242o,300o,"f5"
	db	"dV",271o,335o,"q'"
	db	"fU",260o,326o,"|)"
	db	"h\",217o,347o,"_",003o
	db	"j_",206o,354o,"R",015o
	db	"lZ",235o,361o,"E",037o
	db	"nY",224o,372o,"H",021o
	db	"pH",343o,223o,003o,"K"
	db	"rK",352o,230o,016o,"E"
	db	"tN",361o,205o,031o,"W"
	db	"vM",370o,216o,024o,"Y"
	db	"xD",307o,277o,"7s"
	db	"zG",316o,264o,":}"
	db	"|B",325o,251o,"-o"
	db	"~A",334o,242o," a"
	db	"",200o,300o,"v",366o,"m",255o
	db	"",202o,303o,177o,375o,"`",243o
	db	"",204o,306o,"d",340o,"w",261o
	db	"",206o,305o,"m",353o,"z",277o
	db	"",210o,314o,"R",332o,"Y",225o
	db	"",212o,317o,"[",321o,"T",233o
	db	"",214o,312o,"@",314o,"C",211o
	db	"",216o,311o,"I",307o,"N",207o
	db	"",220o,330o,">",256o,005o,335o
	db	"",222o,333o,"7",245o,010o,323o
	db	"",224o,336o,",",270o,037o,301o
	db	"",226o,335o,"%",263o,022o,317o
	db	"",230o,324o,032o,202o,"1",345o
	db	"",232o,327o,023o,211o,"<",353o
	db	"",234o,322o,010o,224o,"+",371o
	db	"",236o,321o,001o,237o,"&",367o
	db	"",240o,360o,346o,"F",275o,"M"
	db	"",242o,363o,357o,"M",260o,"C"
	db	"",244o,366o,364o,"P",247o,"Q"
	db	"",246o,365o,375o,"[",252o,"_"
	db	"",250o,374o,302o,"j",211o,"u"
	db	"",252o,377o,313o,"a",204o,"{"
	db	"",254o,372o,320o,"|",223o,"i"
	db	"",256o,371o,331o,"w",236o,"g"
	db	"",260o,350o,256o,036o,325o,"="
	db	"",262o,353o,247o,025o,330o,"3"
	db	"",264o,356o,274o,010o,317o,"!"
	db	"",266o,355o,265o,003o,302o,"/"
	db	"",270o,344o,212o,"2",341o,005o
	db	"",272o,347o,203o,"9",354o,013o
	db	"",274o,342o,230o,"$",373o,031o
	db	"",276o,341o,221o,"/",366o,027o
	db	"",300o,240o,"M",215o,326o,"v"
	db	"",302o,243o,"D",206o,333o,"x"
	db	"",304o,246o,"_",233o,314o,"j"
	db	"",306o,245o,"V",220o,301o,"d"
	db	"",310o,254o,"i",241o,342o,"N"
	db	"",312o,257o,"`",252o,357o,"@"
	db	"",314o,252o,"{",267o,370o,"R"
	db	"",316o,251o,"r",274o,365o,"\"
	db	"",320o,270o,005o,325o,276o,006o
	db	"",322o,273o,014o,336o,263o,010o
	db	"",324o,276o,027o,303o,244o,032o
	db	"",326o,275o,036o,310o,251o,024o
	db	"",330o,264o,"!",371o,212o,">"
	db	"",332o,267o,"(",362o,207o,"0"
	db	"",334o,262o,"3",357o,220o,""""
	db	"",336o,261o,":",344o,235o,","
	db	"",340o,220o,335o,"=",006o,226o
	db	"",342o,223o,324o,"6",013o,230o
	db	"",344o,226o,317o,"+",034o,212o
	db	"",346o,225o,306o," ",021o,204o
	db	"",350o,234o,371o,021o,"2",256o
	db	"",352o,237o,360o,032o,"?",240o
	db	"",354o,232o,353o,007o,"(",262o
	db	"",356o,231o,342o,014o,"%",274o
	db	"",360o,210o,225o,"en",346o
	db	"",362o,213o,234o,"nc",350o
	db	"",364o,216o,207o,"st",372o
	db	"",366o,215o,216o,"xy",364o
	db	"",370o,204o,261o,"IZ",336o
	db	"",372o,207o,270o,"BW",320o
	db	"",374o,202o,243o,"_@",302o
	db	"",376o,201o,252o,"TM",314o
	db	"",033o,233o,354o,367o,332o,"A"
	db	"",031o,230o,345o,374o,327o,"O"
	db	"",037o,235o,376o,341o,300o,"]"
	db	"",035o,236o,367o,352o,315o,"S"
	db	"",023o,227o,310o,333o,356o,"y"
	db	"",021o,224o,301o,320o,343o,"w"
	db	"",027o,221o,332o,315o,364o,"e"
	db	"",025o,222o,323o,306o,371o,"k"
	db	"",013o,203o,244o,257o,262o,"1"
	db	"",011o,200o,255o,244o,277o,"?"
	db	"",017o,205o,266o,271o,250o,"-"
	db	"",015o,206o,277o,262o,245o,"#"
	db	"",003o,217o,200o,203o,206o,011o
	db	"",001o,214o,211o,210o,213o,007o
	db	"",007o,211o,222o,225o,234o,025o
	db	"",005o,212o,233o,236o,221o,033o
	db	";",253o,"|G",012o,241o
	db	"9",250o,"uL",007o,257o
	db	"?",255o,"nQ",020o,275o
	db	"=",256o,"gZ",035o,263o
	db	"3",247o,"Xk>",231o
	db	"1",244o,"Q`3",227o
	db	"7",241o,"J}$",205o
	db	"5",242o,"Cv)",213o
	db	"+",263o,"4",037o,"b",321o
	db	")",260o,"=",024o,"o",337o
	db	"/",265o,"&",011o,"x",315o
	db	"-",266o,"/",002o,"u",303o
	db	"#",277o,020o,"3V",351o
	db	"!",274o,031o,"8[",347o
	db	"'",271o,002o,"%L",365o
	db	"%",272o,013o,".A",373o
	db	"[",373o,327o,214o,"a",232o
	db	"Y",370o,336o,207o,"l",224o
	db	"_",375o,305o,232o,"{",206o
	db	"]",376o,314o,221o,"v",210o
	db	"S",367o,363o,240o,"U",242o
	db	"Q",364o,372o,253o,"X",254o
	db	"W",361o,341o,266o,"O",276o
	db	"U",362o,350o,275o,"B",260o
	db	"K",343o,237o,324o,011o,352o
	db	"I",340o,226o,337o,004o,344o
	db	"O",345o,215o,302o,023o,366o
	db	"M",346o,204o,311o,036o,370o
	db	"C",357o,273o,370o,"=",322o
	db	"A",354o,262o,363o,"0",334o
	db	"G",351o,251o,356o,"'",316o
	db	"E",352o,240o,345o,"*",300o
	db	"{",313o,"G<",261o,"z"
	db	"y",310o,"N7",274o,"t"
	db	"",177o,315o,"U*",253o,"f"
	db	"}",316o,"\!",246o,"h"
	db	"s",307o,"c",020o,205o,"B"
	db	"q",304o,"j",033o,210o,"L"
	db	"w",301o,"q",006o,237o,"^"
	db	"u",302o,"x",015o,222o,"P"
	db	"k",323o,017o,"d",331o,012o
	db	"i",320o,006o,"o",324o,004o
	db	"o",325o,035o,"r",303o,026o
	db	"m",326o,024o,"y",316o,030o
	db	"c",337o,"+H",355o,"2"
	db	"a",334o,"""C",340o,"<"
	db	"g",331o,"9^",367o,"."
	db	"e",332o,"0U",372o," "
	db	"",233o,"[",232o,001o,267o,354o
	db	"",231o,"X",223o,012o,272o,342o
	db	"",237o,"]",210o,027o,255o,360o
	db	"",235o,"^",201o,034o,240o,376o
	db	"",223o,"W",276o,"-",203o,324o
	db	"",221o,"T",267o,"&",216o,332o
	db	"",227o,"Q",254o,";",231o,310o
	db	"",225o,"R",245o,"0",224o,306o
	db	"",213o,"C",322o,"Y",337o,234o
	db	"",211o,"@",333o,"R",322o,222o
	db	"",217o,"E",300o,"O",305o,200o
	db	"",215o,"F",311o,"D",310o,216o
	db	"",203o,"O",366o,"u",353o,244o
	db	"",201o,"L",377o,"~",346o,252o
	db	"",207o,"I",344o,"c",361o,270o
	db	"",205o,"J",355o,"h",374o,266o
	db	"",273o,"k",012o,261o,"g",014o
	db	"",271o,"h",003o,272o,"j",002o
	db	"",277o,"m",030o,247o,"}",020o
	db	"",275o,"n",021o,254o,"p",036o
	db	"",263o,"g.",235o,"S4"
	db	"",261o,"d'",226o,"^:"
	db	"",267o,"a<",213o,"I("
	db	"",265o,"b5",200o,"D&"
	db	"",253o,"sB",351o,017o,"|"
	db	"",251o,"pK",342o,002o,"r"
	db	"",257o,"uP",377o,025o,"`"
	db	"",255o,"vY",364o,030o,"n"
	db	"",243o,177o,"f",305o,";D"
	db	"",241o,"|o",316o,"6J"
	db	"",247o,"yt",323o,"!X"
	db	"",245o,"z}",330o,",V"
	db	"",333o,";",241o,"z",014o,"7"
	db	"",331o,"8",250o,"q",001o,"9"
	db	"",337o,"=",263o,"l",026o,"+"
	db	"",335o,">",272o,"g",033o,"%"
	db	"",323o,"7",205o,"V8",017o
	db	"",321o,"4",214o,"]5",001o
	db	"",327o,"1",227o,"@""",023o
	db	"",325o,"2",236o,"K/",035o
	db	"",313o,"#",351o,"""dG"
	db	"",311o," ",340o,")iI"
	db	"",317o,"%",373o,"4~["
	db	"",315o,"&",362o,"?sU"
	db	"",303o,"/",315o,016o,"P",177o
	db	"",301o,",",304o,005o,"]q"
	db	"",307o,")",337o,030o,"Jc"
	db	"",305o,"*",326o,023o,"Gm"
	db	"",373o,013o,"1",312o,334o,327o
	db	"",371o,010o,"8",301o,321o,331o
	db	"",377o,015o,"#",334o,306o,313o
	db	"",375o,016o,"*",327o,313o,305o
	db	"",363o,007o,025o,346o,350o,357o
	db	"",361o,004o,034o,355o,345o,341o
	db	"",367o,001o,007o,360o,362o,363o
	db	"",365o,002o,016o,373o,377o,375o
	db	"",353o,023o,"y",222o,264o,247o
	db	"",351o,020o,"p",231o,271o,251o
	db	"",357o,025o,"k",204o,256o,273o
	db	"",355o,026o,"b",217o,243o,265o
	db	"",343o,037o,"]",276o,200o,237o
	db	"",341o,034o,"T",265o,215o,221o
	db	"",347o,031o,"O",250o,232o,203o
	db	"",345o,032o,"F",243o,227o,215o

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	__Unwind_SjLj_Register
	extern	__lor
	extern	_hashlib_Sha256Final
	extern	_hashlib_Sha256Update
	extern	_memcpy
	extern	__ishl
	extern	__ladd
	extern	__idivu
	extern	__setflag
	extern	__iand
	extern	__lshru
	extern	_memset
	extern	__frameset
	extern	__ishru
	extern	__lshl
	extern	__iremu
	extern	_hashlib_Sha256Init
	extern	__imulu
	extern	__Unwind_SjLj_Unregister
	extern	__lxor
	extern	__bshl
	extern	__bshru
	extern	__frameset0
