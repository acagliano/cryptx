	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_main
_main:
	ld	hl, -652
	call	__frameset
	ld	de, -604
	lea	iy, ix + 0
	add	iy, de
	ld	bc, 0
	ld	de, -249
	lea	hl, ix + 0
	add	hl, de
	push	ix
	ld	de, -631
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 112
	push	ix
	ld	de, -628
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 80
	push	ix
	ld	de, -643
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 48
	push	ix
	ld	de, -646
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 32
	lea	de, iy + 16
	ld	(ix + -3), bc
	push	ix
	ld	bc, -610
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	lea	de, iy + 0
	ld	bc, -634
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), de
	ld	de, 16
	push	de
	ld	bc, (ix + -3)
	push	bc
	push	ix
	ld	bc, -640
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 16
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -610
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _str
	push	hl
	call	_strlen
	push	hl
	pop	iy
	pop	hl
	lea	hl, iy + 0
	ld	bc, 1
	call	__iand
	ld	e, 1
	ld	a, l
	xor	a, e
	ld	de, -652
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), iy
	ld	de, 16
	add	iy, de
	lea	hl, iy + 0
	ld	bc, -16
	call	__iand
	bit	0, a
	jq	nz, BB0_2
	push	hl
	pop	iy
BB0_2:
	ld	bc, -616
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	ld	hl, 16
	ex	de, hl
	add	iy, de
	ld	bc, -607
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	push	iy
	call	_malloc
	ld	bc, -637
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	pop	hl
	ld	bc, -607
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_malloc
	push	ix
	ld	bc, -613
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	pop	hl
	ld	bc, -607
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_malloc
	push	ix
	ld	bc, -649
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	pop	hl
	ld	bc, -607
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_malloc
	push	ix
	ld	bc, -619
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	pop	hl
	ld	bc, -607
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_malloc
	push	ix
	ld	bc, -622
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	pop	hl
	ld	bc, -607
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_malloc
	push	ix
	ld	bc, -625
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	pop	hl
	ld	hl, 32
	push	hl
	ld	bc, -643
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_hashlib_RandomBytes
	pop	hl
	pop	hl
	ld	hl, 32
	push	hl
	ld	bc, -646
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_hashlib_RandomBytes
	pop	hl
	pop	hl
	ld	hl, 16
	push	hl
	ld	bc, -634
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_hashlib_RandomBytes
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	inc	hl
	push	hl
	ld	bc, -613
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -652
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, _str
	push	hl
	call	_hashlib_PadMessage
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 256
	push	hl
	ld	bc, -628
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -646
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_hashlib_AESLoadKey
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 256
	push	hl
	ld	bc, -631
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -643
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_hashlib_AESLoadKey
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -628
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -610
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -616
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -613
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_hashlib_AESOutputMAC
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 28
	push	hl
	ld	hl, L_.str
	push	hl
	ld	hl, -327680
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	de, 16
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
BB0_3:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	z, BB0_5
	ld	de, -610
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	hl
	ld	hl, L_.str.1
	push	hl
	ld	hl, -327680
	push	hl
	ld	de, -643
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	call	_sprintf_
	ld	de, -643
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	pop	hl
	pop	hl
	pop	hl
	inc	bc
	ld	de, 16
	jq	BB0_3
BB0_5:
	ld	hl, -327680
	push	hl
	pop	iy
	ld.sis	hl, 10
	ld	(iy), l
	ld	(iy + 1), h
	ld	hl, 16
	push	hl
	ld	bc, -610
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -637
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -616
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -613
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -637
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	pea	iy + 16
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -634
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -631
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -619
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -607
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -637
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_hashlib_AESEncrypt
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -634
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -631
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -622
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -607
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -619
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_hashlib_AESDecrypt
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -622
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	lea	de, iy + 16
	ld	bc, -607
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), de
	push	ix
	ld	bc, -628
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	push	hl
	ld	bc, -640
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -616
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	push	de
	call	_hashlib_AESOutputMAC
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	inc	hl
	push	hl
	ld	bc, -625
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -616
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -607
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_hashlib_StripPadding
	pop	de
	pop	de
	pop	de
	pop	de
	pop	de
	push	hl
	ld	bc, -625
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	hl, L_.str.3
	push	hl
	ld	hl, -327680
	push	hl
	call	_sprintf_
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 38
	push	hl
	ld	hl, L_.str.4
	push	hl
	ld	hl, -327680
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
BB0_6:
	push	bc
	pop	hl
	ld	de, 16
	or	a, a
	sbc	hl, de
	jq	z, BB0_8
	ld	de, -640
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	l, a
	push	hl
	ld	hl, L_.str.1
	push	hl
	ld	hl, -327680
	push	hl
	ld	de, -607
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	call	_sprintf_
	ld	de, -607
	lea	hl, ix + 0
	add	hl, de
	ld	bc, (hl)
	pop	hl
	pop	hl
	pop	hl
	inc	bc
	jq	BB0_6
BB0_8:
	ld	hl, -327680
	push	hl
	pop	iy
	ld.sis	hl, 10
	ld	(iy), l
	ld	(iy + 1), h
	ld	hl, 16
	push	hl
	ld	bc, -640
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -610
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memcmp
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_10
	ld	hl, 32
	push	hl
	ld	hl, L_.str.5
	jq	BB0_11
BB0_10:
	ld	hl, 38
	push	hl
	ld	hl, L_.str.6
BB0_11:
	push	hl
	ld	hl, -327680
	push	hl
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld.sis	hl, 10
	ld	iy, -327680
	ld	(iy), l
	ld	(iy + 1), h
	ld	bc, -613
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	pop	hl
	ld	bc, -649
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	pop	hl
	ld	bc, -619
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	pop	hl
	ld	bc, -622
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	pop	hl
	ld	bc, -625
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_free
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.data,"aw",@progbits
	public	_str
_str:
	db	"The lazy fox jumped over the dog!",000o

	section	.rodata,"a",@progbits
	private	L_.str
L_.str:
	db	"The MAC of the message is: ",000o

	section	.rodata,"a",@progbits
	private	L_.str.1
L_.str.1:
	db	"%02X ",000o

	section	.rodata,"a",@progbits
	private	L_.str.3
L_.str.3:
	db	"The message is '%s' and its size is %u bytes.",012o,000o

	section	.rodata,"a",@progbits
	private	L_.str.4
L_.str.4:
	db	"The MAC of the decrypted message is: ",000o

	section	.rodata,"a",@progbits
	private	L_.str.5
L_.str.5:
	db	"The MAC of the message matched.",000o

	section	.rodata,"a",@progbits
	private	L_.str.6
L_.str.6:
	db	"The MAC of the message did not match.",000o

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	_hashlib_RandomBytes
	extern	_hashlib_StripPadding
	extern	_memcmp
	extern	_memset
	extern	__Unwind_SjLj_Register
	extern	_hashlib_AESDecrypt
	extern	__frameset
	extern	_malloc
	extern	__iand
	extern	_sprintf_
	extern	__Unwind_SjLj_Unregister
	extern	_hashlib_AESOutputMAC
	extern	_free
	extern	_memcpy
	extern	_hashlib_PadMessage
	extern	_strlen
	extern	_hashlib_AESEncrypt
	extern	_hashlib_AESLoadKey
